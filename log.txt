commit fd3f1fd024ad86cee8abb8c6a6dd65e6d73975c0
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 25 19:02:58 2019 +0300

    FieldShow

diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index bee088b..8b21a52 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -38,6 +38,7 @@ namespace Model
 
     public Figure(string parFigureCode)
     {
+      FigureShape = new Cell[FIGURE_SIZE][];
       for (int i = 0; i < FIGURE_SIZE; i++)
       {
         FigureShape[i] = new Cell[FIGURE_SIZE];
@@ -48,10 +49,10 @@ namespace Model
       }
       for (int i = 0; i < parFigureCode.Length; i++)
       {
-        for (int j = 0; j < FIGURE_SIZE - 1; j++)
+        for (int j = 0; j < FIGURE_SIZE; j++)
         {
-          FigureShape[i % FIGURE_SIZE][j].IsFull = (parFigureCode[FIGURE_SIZE * i + j] == '1');
-          if (parFigureCode[FIGURE_SIZE * i + j] == '1')
+          FigureShape[i % FIGURE_SIZE][j].IsFull = (parFigureCode[i] == '1');
+          if (parFigureCode[i] == '1')
           {
             WidthFigure = j + 1;
             HeightFigure = i + 1;
diff --git a/StartBlockPuzzle/Program.cs b/StartBlockPuzzle/Program.cs
index bb33140..8771dab 100644
--- a/StartBlockPuzzle/Program.cs
+++ b/StartBlockPuzzle/Program.cs
@@ -15,10 +15,9 @@ namespace StartBlockPuzzle
     [STAThread]
     static void Main()
     {
-
-      ControllerWindows controllerWindows = new ControllerWindows();
       Application.EnableVisualStyles();
       Application.SetCompatibleTextRenderingDefault(false);
+      ControllerWindows controllerWindows = new ControllerWindows();
     }
   }
 }
diff --git a/ViewWindowsForms/ViewWindows.cs b/ViewWindowsForms/ViewWindows.cs
index ae15115..cb15dde 100644
--- a/ViewWindowsForms/ViewWindows.cs
+++ b/ViewWindowsForms/ViewWindows.cs
@@ -53,14 +53,11 @@ namespace ViewWindowsForms
       GameForm.Height = 400;
       GameForm.Width = 500;
       GameForm.FormBorderStyle = FormBorderStyle.FixedSingle;
-
-      PanelDrawing = new Panel();
-      PanelDrawing.Location = new Point(5, 5);
-      GameForm.Controls.Add(PanelDrawing);
-      Graphics targetgraphics = PanelDrawing.CreateGraphics();
-      Rectangle targetrectangle = PanelDrawing.ClientRectangle;
-      _bufferedGraphics = BufferedGraphicsManager.Current.Allocate(targetgraphics, targetrectangle);
-
+      
+      Graphics targetgraphics = GameForm.CreateGraphics();
+      _bufferedGraphics = BufferedGraphicsManager.Current.Allocate(
+        targetgraphics, 
+        new Rectangle(0,0, GameForm.Width, GameForm.Height));
       FieldRectangles = new RectangleF[COUNT_ROW][];
       for (int i = 0; i < COUNT_ROW; i++)
       {
@@ -76,9 +73,10 @@ namespace ViewWindowsForms
           FieldRectangles[i][j].Y = 30 * j;
         }
       }
-      IsGame = false;
+      IsGame = true;
       _DrawingThread = new Thread(RedrawCycle);
       _DrawingThread.IsBackground = true;
+      _DrawingThread.Start();
       Application.Run(GameForm);
     }
 

commit 6702458810ef276e312501aabf4778e854fb1749
Merge: 9f1de36 6fe94c4
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 25 17:12:07 2019 +0300

    Merge branch 'master' into WindowsForms

commit 6fe94c4f09b77a91701d4cb22d55af7a9aab3c7d
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 25 17:11:35 2019 +0300

    Figure

diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index 93a6f83..bee088b 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -38,6 +38,14 @@ namespace Model
 
     public Figure(string parFigureCode)
     {
+      for (int i = 0; i < FIGURE_SIZE; i++)
+      {
+        FigureShape[i] = new Cell[FIGURE_SIZE];
+        for (int j = 0; j < FIGURE_SIZE; j++)
+        {
+          FigureShape[i][j] = new Cell(false);
+        }
+      }
       for (int i = 0; i < parFigureCode.Length; i++)
       {
         for (int j = 0; j < FIGURE_SIZE - 1; j++)

commit 9f1de3634d88398290a68d735e37a7902e7e9b38
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 25 17:05:38 2019 +0300

    Figure

diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index 4c6b89b..93a6f83 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -38,14 +38,6 @@ namespace Model
 
     public Figure(string parFigureCode)
     {
-      for (int i = 0; i < FIGURE_SIZE; i++)
-      {
-        FigureShape[i] = new Cell[FIGURE_SIZE];
-        for (int i = 0; i < length; i++)
-        {
-
-        }
-      }
       for (int i = 0; i < parFigureCode.Length; i++)
       {
         for (int j = 0; j < FIGURE_SIZE - 1; j++)

commit 79d19d51acb33d2e73a901547ee2c2f94087b801
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 25 16:43:34 2019 +0300

    Figure

diff --git a/ControllerWindowsForms/ControllerWindows.cs b/ControllerWindowsForms/ControllerWindows.cs
index 50a35cb..f5b687d 100644
--- a/ControllerWindowsForms/ControllerWindows.cs
+++ b/ControllerWindowsForms/ControllerWindows.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using Model;
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -16,7 +17,9 @@ namespace ControllerWindowsForms
     }
     public ControllerWindows()
     {
+      ModelGamePlay modelGamePlay = new ModelGamePlay();
       ViewWindows viewWindows = new ViewWindows();
+      viewWindows.IsGame = true;
     }
   }
 }
diff --git a/ControllerWindowsForms/ControllerWindowsForms.csproj b/ControllerWindowsForms/ControllerWindowsForms.csproj
index 3bc12e8..d4b4ee1 100644
--- a/ControllerWindowsForms/ControllerWindowsForms.csproj
+++ b/ControllerWindowsForms/ControllerWindowsForms.csproj
@@ -45,6 +45,10 @@
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <ItemGroup>
+    <ProjectReference Include="..\Model\Model.csproj">
+      <Project>{58d968e0-98a3-4de4-a2ee-4f55cd7e0699}</Project>
+      <Name>Model</Name>
+    </ProjectReference>
     <ProjectReference Include="..\ViewWindowsForms\ViewWindowsForms.csproj">
       <Project>{4db0be87-3220-48f9-ba6f-c0a996cb2e9d}</Project>
       <Name>ViewWindowsForms</Name>
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index 93a6f83..4c6b89b 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -38,6 +38,14 @@ namespace Model
 
     public Figure(string parFigureCode)
     {
+      for (int i = 0; i < FIGURE_SIZE; i++)
+      {
+        FigureShape[i] = new Cell[FIGURE_SIZE];
+        for (int i = 0; i < length; i++)
+        {
+
+        }
+      }
       for (int i = 0; i < parFigureCode.Length; i++)
       {
         for (int j = 0; j < FIGURE_SIZE - 1; j++)
diff --git a/StartBlockPuzzle/Program.cs b/StartBlockPuzzle/Program.cs
index 8771dab..bb33140 100644
--- a/StartBlockPuzzle/Program.cs
+++ b/StartBlockPuzzle/Program.cs
@@ -15,9 +15,10 @@ namespace StartBlockPuzzle
     [STAThread]
     static void Main()
     {
+
+      ControllerWindows controllerWindows = new ControllerWindows();
       Application.EnableVisualStyles();
       Application.SetCompatibleTextRenderingDefault(false);
-      ControllerWindows controllerWindows = new ControllerWindows();
     }
   }
 }
diff --git a/StartBlockPuzzle/StartBlockPuzzle.csproj b/StartBlockPuzzle/StartBlockPuzzle.csproj
index 1e6b7c2..280bca6 100644
--- a/StartBlockPuzzle/StartBlockPuzzle.csproj
+++ b/StartBlockPuzzle/StartBlockPuzzle.csproj
@@ -75,10 +75,6 @@
       <Project>{1830bbc5-79dd-430c-bfec-11df180314a3}</Project>
       <Name>ControllerWindowsForms</Name>
     </ProjectReference>
-    <ProjectReference Include="..\ViewWindowsForms\ViewWindowsForms.csproj">
-      <Project>{4db0be87-3220-48f9-ba6f-c0a996cb2e9d}</Project>
-      <Name>ViewWindowsForms</Name>
-    </ProjectReference>
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/ViewWindowsForms/ViewWindows.cs b/ViewWindowsForms/ViewWindows.cs
index 6c936c2..ae15115 100644
--- a/ViewWindowsForms/ViewWindows.cs
+++ b/ViewWindowsForms/ViewWindows.cs
@@ -45,7 +45,7 @@ namespace ViewWindowsForms
       get;
       set;
     }
-    
+
 
     public ViewWindows()
     {
@@ -53,28 +53,53 @@ namespace ViewWindowsForms
       GameForm.Height = 400;
       GameForm.Width = 500;
       GameForm.FormBorderStyle = FormBorderStyle.FixedSingle;
+
       PanelDrawing = new Panel();
       PanelDrawing.Location = new Point(5, 5);
       GameForm.Controls.Add(PanelDrawing);
       Graphics targetgraphics = PanelDrawing.CreateGraphics();
       Rectangle targetrectangle = PanelDrawing.ClientRectangle;
       _bufferedGraphics = BufferedGraphicsManager.Current.Allocate(targetgraphics, targetrectangle);
+
       FieldRectangles = new RectangleF[COUNT_ROW][];
       for (int i = 0; i < COUNT_ROW; i++)
       {
         FieldRectangles[i] = new RectangleF[COUNT_COLUMN];
       }
-      IsGame = true;
+      for (int i = 0; i < FieldRectangles.Length; i++)
+      {
+        for (int j = 0; j < FieldRectangles[i].Length; j++)
+        {
+          FieldRectangles[i][j].Width = 30;
+          FieldRectangles[i][j].Height = 30;
+          FieldRectangles[i][j].X = 30 * i;
+          FieldRectangles[i][j].Y = 30 * j;
+        }
+      }
+      IsGame = false;
       _DrawingThread = new Thread(RedrawCycle);
       _DrawingThread.IsBackground = true;
       Application.Run(GameForm);
     }
 
+    public void ShowField()
+    {
+      for (int i = 0; i < FieldRectangles.Length; i++)
+      {
+        for (int j = 0; j < FieldRectangles[i].Length; j++)
+        {
+          _bufferedGraphics.Graphics.DrawRectangle(Pens.Blue, Rectangle.Ceiling(FieldRectangles[i][j]));
+        }
+      }
+    }
+
     public void RedrawCycle()
     {
       while (IsGame)
       {
-
+        _bufferedGraphics.Graphics.Clear(SystemColors.Control);
+        ShowField();
+        _bufferedGraphics.Render();
       }
     }
   }

commit aa1395e557f7e4c3fac74e75fdd225627bbce4fd
Author: kolay <kolaygreha@mail.ru>
Date:   Fri Dec 20 11:10:08 2019 +0300

    Add panel on form

diff --git a/ControllerWindowsForms/ControllerWindows.cs b/ControllerWindowsForms/ControllerWindows.cs
index 16f6c12..50a35cb 100644
--- a/ControllerWindowsForms/ControllerWindows.cs
+++ b/ControllerWindowsForms/ControllerWindows.cs
@@ -3,10 +3,20 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using ViewWindowsForms;
 
 namespace ControllerWindowsForms
 {
-  class ControllerWindows
+  public class ControllerWindows
   {
+    public ViewWindows ViewWindows
+    {
+      get;
+      set;
+    }
+    public ControllerWindows()
+    {
+      ViewWindows viewWindows = new ViewWindows();
+    }
   }
 }
diff --git a/ControllerWindowsForms/ControllerWindowsForms.csproj b/ControllerWindowsForms/ControllerWindowsForms.csproj
index 783fb01..3bc12e8 100644
--- a/ControllerWindowsForms/ControllerWindowsForms.csproj
+++ b/ControllerWindowsForms/ControllerWindowsForms.csproj
@@ -44,5 +44,11 @@
     <Compile Include="ControllerWindows.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\ViewWindowsForms\ViewWindowsForms.csproj">
+      <Project>{4db0be87-3220-48f9-ba6f-c0a996cb2e9d}</Project>
+      <Name>ViewWindowsForms</Name>
+    </ProjectReference>
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 7dcf9eb..362a8d7 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -4,7 +4,7 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
-//Merge from model to WindowsForms
+
 namespace Model
 {
   public class ModelGamePlay
diff --git a/StartBlockPuzzle/Program.cs b/StartBlockPuzzle/Program.cs
index de0487b..8771dab 100644
--- a/StartBlockPuzzle/Program.cs
+++ b/StartBlockPuzzle/Program.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using ControllerWindowsForms;
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Threading.Tasks;
@@ -16,49 +17,7 @@ namespace StartBlockPuzzle
     {
       Application.EnableVisualStyles();
       Application.SetCompatibleTextRenderingDefault(false);
-      Application.Run(new );
+      ControllerWindows controllerWindows = new ControllerWindows();
     }
   }
 }
-class Program
-{
-  private static void Main(string[] args)
-  {
-    ThreadsTest threadsTest = new ThreadsTest();
-    threadsTest.Execute();
-  }
-}
-
-class ThreadsTest
-{
-  private volatile bool IsRunning;
-
-  public void Execute()
-  {
-    IsRunning = true;
-    Thread th = new Thread(ThreadLoop);
-    th.IsBackground = true;
-
-    Console.WriteLine("MAIN: Starting thread");
-    th.Start();
-
-    Console.WriteLine("MAIN: Waiting");
-    Thread.Sleep(1000);
-
-    Console.WriteLine("MAIN: Stopping thread");
-    IsRunning = false;
-
-    Console.WriteLine("MAIN: Waiting for keypress to exit");
-    Console.ReadKey();
-  }
-  private void ThreadLoop()
-  {
-    Console.WriteLine("THREAD: Starting");
-    while (IsRunning)
-    {
-      Console.WriteLine("THREAD: Doing something");
-      Thread.Sleep(100);
-    }
-    Console.WriteLine("THREAD: Exiting");
-  }
-}
diff --git a/StartBlockPuzzle/StartBlockPuzzle.csproj b/StartBlockPuzzle/StartBlockPuzzle.csproj
index 6014e13..1e6b7c2 100644
--- a/StartBlockPuzzle/StartBlockPuzzle.csproj
+++ b/StartBlockPuzzle/StartBlockPuzzle.csproj
@@ -70,5 +70,15 @@
   <ItemGroup>
     <None Include="App.config" />
   </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\ControllerWindowsForms\ControllerWindowsForms.csproj">
+      <Project>{1830bbc5-79dd-430c-bfec-11df180314a3}</Project>
+      <Name>ControllerWindowsForms</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\ViewWindowsForms\ViewWindowsForms.csproj">
+      <Project>{4db0be87-3220-48f9-ba6f-c0a996cb2e9d}</Project>
+      <Name>ViewWindowsForms</Name>
+    </ProjectReference>
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/ViewWindowsForms/ViewWindows.cs b/ViewWindowsForms/ViewWindows.cs
index 1ed5757..6c936c2 100644
--- a/ViewWindowsForms/ViewWindows.cs
+++ b/ViewWindowsForms/ViewWindows.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using Model;
+using System;
 using System.Collections.Generic;
 using System.Drawing;
 using System.Linq;
@@ -9,33 +10,72 @@ using System.Windows.Forms;
 
 namespace ViewWindowsForms
 {
-  class ViewWindows
+  public class ViewWindows
   {
+    private const int COUNT_COLUMN = 10;
+    private const int COUNT_ROW = 10;
+    /// <summary>
+    /// Координаты правой границы
+    /// </summary>
+    private float _Right = 0.0F;
+    /// <summary>
+    /// Координаты нижней границы
+    /// </summary>
+    private float _Bottom = 0.0F;
     /// <summary>
     /// Рисование с использованием технологии двойной буферизации
     /// </summary>
-    private BufferedGraphics _BufferedGraphics = null;
+    Panel _PanelDrawing;
+    public Panel PanelDrawing { get; set; }
+    private BufferedGraphics _bufferedGraphics = null;
+    private volatile bool _isGame;
+    private Thread _DrawingThread;
+    public bool IsGame
+    {
+      get { return _isGame; }
+      set { _isGame = value; }
+    }
     public RectangleF[][] FieldRectangles
     {
       get;
       set;
     }
-
-    public Form GameForm
+    public static Form GameForm
     {
       get;
       set;
     }
-    private Thread thread;
+    
 
     public ViewWindows()
     {
       GameForm = new Form();
+      GameForm.Height = 400;
+      GameForm.Width = 500;
       GameForm.FormBorderStyle = FormBorderStyle.FixedSingle;
-      Graphics targetGraphics = _PanelDrawing.CreateGraphics();
-      Rectangle targetRectangle = _PanelDrawing.ClientRectangle;
-      _BufferedGraphics = BufferedGraphicsManager.Current.Allocate(targetGraphics, targetRectangle);
-      FieldRectangles = new RectangleF[][];
+      PanelDrawing = new Panel();
+      PanelDrawing.Location = new Point(5, 5);
+      GameForm.Controls.Add(PanelDrawing);
+      Graphics targetgraphics = PanelDrawing.CreateGraphics();
+      Rectangle targetrectangle = PanelDrawing.ClientRectangle;
+      _bufferedGraphics = BufferedGraphicsManager.Current.Allocate(targetgraphics, targetrectangle);
+      FieldRectangles = new RectangleF[COUNT_ROW][];
+      for (int i = 0; i < COUNT_ROW; i++)
+      {
+        FieldRectangles[i] = new RectangleF[COUNT_COLUMN];
+      }
+      IsGame = true;
+      _DrawingThread = new Thread(RedrawCycle);
+      _DrawingThread.IsBackground = true;
+      Application.Run(GameForm);
+    }
+
+    public void RedrawCycle()
+    {
+      while (IsGame)
+      {
+
+      }
     }
   }
 }
diff --git a/ViewWindowsForms/ViewWindowsForms.csproj b/ViewWindowsForms/ViewWindowsForms.csproj
index af07b8b..a07868e 100644
--- a/ViewWindowsForms/ViewWindowsForms.csproj
+++ b/ViewWindowsForms/ViewWindowsForms.csproj
@@ -46,5 +46,11 @@
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="ViewWindows.cs" />
   </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\Model\Model.csproj">
+      <Project>{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}</Project>
+      <Name>Model</Name>
+    </ProjectReference>
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file

commit d1f8aa1038685a9e6ddee801b145231da35dcbab
Author: kolay <kolaygreha@mail.ru>
Date:   Thu Dec 19 11:06:40 2019 +0300

    AddControllerWF

diff --git a/BlockPuzzle.sln b/BlockPuzzle.sln
index 2a3ef8d..b3498de 100644
--- a/BlockPuzzle.sln
+++ b/BlockPuzzle.sln
@@ -11,6 +11,14 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "View", "View\View.csproj",
 EndProject
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Core", "Core", "{66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}"
 EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Windows", "Windows", "{E48CA93E-BE5C-49CF-BAB3-727748BCB749}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ViewWindowsForms", "ViewWindowsForms\ViewWindowsForms.csproj", "{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "StartBlockPuzzle", "StartBlockPuzzle\StartBlockPuzzle.csproj", "{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ControllerWindowsForms", "ControllerWindowsForms\ControllerWindowsForms.csproj", "{1830BBC5-79DD-430C-BFEC-11DF180314A3}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -29,6 +37,18 @@ Global
 		{3731401D-E76A-43EF-B549-74CB37C6B074}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{3731401D-E76A-43EF-B549-74CB37C6B074}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{3731401D-E76A-43EF-B549-74CB37C6B074}.Release|Any CPU.Build.0 = Release|Any CPU
+		{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{1830BBC5-79DD-430C-BFEC-11DF180314A3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{1830BBC5-79DD-430C-BFEC-11DF180314A3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{1830BBC5-79DD-430C-BFEC-11DF180314A3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{1830BBC5-79DD-430C-BFEC-11DF180314A3}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
@@ -37,6 +57,8 @@ Global
 		{67DC37B6-3215-41F2-8A52-76E761E2CA64} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
 		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
 		{3731401D-E76A-43EF-B549-74CB37C6B074} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
+		{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D} = {E48CA93E-BE5C-49CF-BAB3-727748BCB749}
+		{1830BBC5-79DD-430C-BFEC-11DF180314A3} = {E48CA93E-BE5C-49CF-BAB3-727748BCB749}
 	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {46EA8955-6026-4BB8-8372-120145E4C297}
diff --git a/ControllerWindowsForms/ControllerWindows.cs b/ControllerWindowsForms/ControllerWindows.cs
new file mode 100644
index 0000000..16f6c12
--- /dev/null
+++ b/ControllerWindowsForms/ControllerWindows.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace ControllerWindowsForms
+{
+  class ControllerWindows
+  {
+  }
+}
diff --git a/ControllerWindowsForms/ControllerWindowsForms.csproj b/ControllerWindowsForms/ControllerWindowsForms.csproj
new file mode 100644
index 0000000..783fb01
--- /dev/null
+++ b/ControllerWindowsForms/ControllerWindowsForms.csproj
@@ -0,0 +1,48 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{1830BBC5-79DD-430C-BFEC-11DF180314A3}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>ControllerWindowsForms</RootNamespace>
+    <AssemblyName>ControllerWindowsForms</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="ControllerWindows.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/ControllerWindowsForms/Properties/AssemblyInfo.cs b/ControllerWindowsForms/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..7700895
--- /dev/null
+++ b/ControllerWindowsForms/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ControllerWindowsForms")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ControllerWindowsForms")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("1830bbc5-79dd-430c-bfec-11df180314a3")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/GamePlayWindowsForm/App.config b/GamePlayWindowsForm/App.config
new file mode 100644
index 0000000..731f6de
--- /dev/null
+++ b/GamePlayWindowsForm/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/GamePlayWindowsForm/Form1.Designer.cs b/GamePlayWindowsForm/Form1.Designer.cs
new file mode 100644
index 0000000..0719b82
--- /dev/null
+++ b/GamePlayWindowsForm/Form1.Designer.cs
@@ -0,0 +1,40 @@
+﻿namespace GamePlayWindowsForm
+{
+  partial class Form1
+  {
+    /// <summary>
+    /// Required designer variable.
+    /// </summary>
+    private System.ComponentModel.IContainer components = null;
+
+    /// <summary>
+    /// Clean up any resources being used.
+    /// </summary>
+    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+    protected override void Dispose(bool disposing)
+    {
+      if (disposing && (components != null))
+      {
+        components.Dispose();
+      }
+      base.Dispose(disposing);
+    }
+
+    #region Windows Form Designer generated code
+
+    /// <summary>
+    /// Required method for Designer support - do not modify
+    /// the contents of this method with the code editor.
+    /// </summary>
+    private void InitializeComponent()
+    {
+      this.components = new System.ComponentModel.Container();
+      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+      this.ClientSize = new System.Drawing.Size(800, 450);
+      this.Text = "Form1";
+    }
+
+    #endregion
+  }
+}
+
diff --git a/GamePlayWindowsForm/Form1.cs b/GamePlayWindowsForm/Form1.cs
new file mode 100644
index 0000000..a2e081e
--- /dev/null
+++ b/GamePlayWindowsForm/Form1.cs
@@ -0,0 +1,20 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data;
+using System.Drawing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace GamePlayWindowsForm
+{
+  public partial class Form1 : Form
+  {
+    public Form1()
+    {
+      InitializeComponent();
+    }
+  }
+}
diff --git a/GamePlayWindowsForm/GamePlayWindowsForms.csproj b/GamePlayWindowsForm/GamePlayWindowsForms.csproj
new file mode 100644
index 0000000..f39443c
--- /dev/null
+++ b/GamePlayWindowsForm/GamePlayWindowsForms.csproj
@@ -0,0 +1,80 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{A8E74E14-E489-46D8-ABAD-1262950E5747}</ProjectGuid>
+    <OutputType>WinExe</OutputType>
+    <RootNamespace>GamePlayWindowsForm</RootNamespace>
+    <AssemblyName>GamePlayWindowsForm</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Deployment" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Form1.cs">
+      <SubType>Form</SubType>
+    </Compile>
+    <Compile Include="Form1.Designer.cs">
+      <DependentUpon>Form1.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Program.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+      <SubType>Designer</SubType>
+    </EmbeddedResource>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/GamePlayWindowsForm/Program.cs b/GamePlayWindowsForm/Program.cs
new file mode 100644
index 0000000..1871ba2
--- /dev/null
+++ b/GamePlayWindowsForm/Program.cs
@@ -0,0 +1,22 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace GamePlayWindowsForm
+{
+  static class Program
+  {
+    /// <summary>
+    /// The main entry point for the application.
+    /// </summary>
+    [STAThread]
+    static void Main()
+    {
+      Application.EnableVisualStyles();
+      Application.SetCompatibleTextRenderingDefault(false);
+      Application.Run(new Form1());
+    }
+  }
+}
diff --git a/GamePlayWindowsForm/Properties/AssemblyInfo.cs b/GamePlayWindowsForm/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..074c046
--- /dev/null
+++ b/GamePlayWindowsForm/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("GamePlayWindowsForm")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("GamePlayWindowsForm")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("a8e74e14-e489-46d8-abad-1262950e5747")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/GamePlayWindowsForm/Properties/Resources.Designer.cs b/GamePlayWindowsForm/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..2b33902
--- /dev/null
+++ b/GamePlayWindowsForm/Properties/Resources.Designer.cs
@@ -0,0 +1,71 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace GamePlayWindowsForm.Properties
+{
+
+
+  /// <summary>
+  ///   A strongly-typed resource class, for looking up localized strings, etc.
+  /// </summary>
+  // This class was auto-generated by the StronglyTypedResourceBuilder
+  // class via a tool like ResGen or Visual Studio.
+  // To add or remove a member, edit your .ResX file then rerun ResGen
+  // with the /str option, or rebuild your VS project.
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  internal class Resources
+  {
+
+    private static global::System.Resources.ResourceManager resourceMan;
+
+    private static global::System.Globalization.CultureInfo resourceCulture;
+
+    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+    internal Resources()
+    {
+    }
+
+    /// <summary>
+    ///   Returns the cached ResourceManager instance used by this class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Resources.ResourceManager ResourceManager
+    {
+      get
+      {
+        if ((resourceMan == null))
+        {
+          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GamePlayWindowsForm.Properties.Resources", typeof(Resources).Assembly);
+          resourceMan = temp;
+        }
+        return resourceMan;
+      }
+    }
+
+    /// <summary>
+    ///   Overrides the current thread's CurrentUICulture property for all
+    ///   resource lookups using this strongly typed resource class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Globalization.CultureInfo Culture
+    {
+      get
+      {
+        return resourceCulture;
+      }
+      set
+      {
+        resourceCulture = value;
+      }
+    }
+  }
+}
diff --git a/GamePlayWindowsForm/Properties/Resources.resx b/GamePlayWindowsForm/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/GamePlayWindowsForm/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/GamePlayWindowsForm/Properties/Settings.Designer.cs b/GamePlayWindowsForm/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..25bcbe3
--- /dev/null
+++ b/GamePlayWindowsForm/Properties/Settings.Designer.cs
@@ -0,0 +1,30 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace GamePlayWindowsForm.Properties
+{
+
+
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
+  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
+  {
+
+    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+    public static Settings Default
+    {
+      get
+      {
+        return defaultInstance;
+      }
+    }
+  }
+}
diff --git a/GamePlayWindowsForm/Properties/Settings.settings b/GamePlayWindowsForm/Properties/Settings.settings
new file mode 100644
index 0000000..3964565
--- /dev/null
+++ b/GamePlayWindowsForm/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
diff --git a/StartBlockPuzzle/App.config b/StartBlockPuzzle/App.config
new file mode 100644
index 0000000..731f6de
--- /dev/null
+++ b/StartBlockPuzzle/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/StartBlockPuzzle/Program.cs b/StartBlockPuzzle/Program.cs
new file mode 100644
index 0000000..de0487b
--- /dev/null
+++ b/StartBlockPuzzle/Program.cs
@@ -0,0 +1,64 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace StartBlockPuzzle
+{
+  static class Program
+  {
+    /// <summary>
+    /// The main entry point for the application.
+    /// </summary>
+    [STAThread]
+    static void Main()
+    {
+      Application.EnableVisualStyles();
+      Application.SetCompatibleTextRenderingDefault(false);
+      Application.Run(new );
+    }
+  }
+}
+class Program
+{
+  private static void Main(string[] args)
+  {
+    ThreadsTest threadsTest = new ThreadsTest();
+    threadsTest.Execute();
+  }
+}
+
+class ThreadsTest
+{
+  private volatile bool IsRunning;
+
+  public void Execute()
+  {
+    IsRunning = true;
+    Thread th = new Thread(ThreadLoop);
+    th.IsBackground = true;
+
+    Console.WriteLine("MAIN: Starting thread");
+    th.Start();
+
+    Console.WriteLine("MAIN: Waiting");
+    Thread.Sleep(1000);
+
+    Console.WriteLine("MAIN: Stopping thread");
+    IsRunning = false;
+
+    Console.WriteLine("MAIN: Waiting for keypress to exit");
+    Console.ReadKey();
+  }
+  private void ThreadLoop()
+  {
+    Console.WriteLine("THREAD: Starting");
+    while (IsRunning)
+    {
+      Console.WriteLine("THREAD: Doing something");
+      Thread.Sleep(100);
+    }
+    Console.WriteLine("THREAD: Exiting");
+  }
+}
diff --git a/StartBlockPuzzle/Properties/AssemblyInfo.cs b/StartBlockPuzzle/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..fd4da7e
--- /dev/null
+++ b/StartBlockPuzzle/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("StartBlockPuzzle")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("StartBlockPuzzle")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("f7bba0a1-7fbf-434b-99e6-2265cc38139f")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/StartBlockPuzzle/Properties/Resources.Designer.cs b/StartBlockPuzzle/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..a4d5843
--- /dev/null
+++ b/StartBlockPuzzle/Properties/Resources.Designer.cs
@@ -0,0 +1,71 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace StartBlockPuzzle.Properties
+{
+
+
+  /// <summary>
+  ///   A strongly-typed resource class, for looking up localized strings, etc.
+  /// </summary>
+  // This class was auto-generated by the StronglyTypedResourceBuilder
+  // class via a tool like ResGen or Visual Studio.
+  // To add or remove a member, edit your .ResX file then rerun ResGen
+  // with the /str option, or rebuild your VS project.
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  internal class Resources
+  {
+
+    private static global::System.Resources.ResourceManager resourceMan;
+
+    private static global::System.Globalization.CultureInfo resourceCulture;
+
+    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+    internal Resources()
+    {
+    }
+
+    /// <summary>
+    ///   Returns the cached ResourceManager instance used by this class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Resources.ResourceManager ResourceManager
+    {
+      get
+      {
+        if ((resourceMan == null))
+        {
+          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("StartBlockPuzzle.Properties.Resources", typeof(Resources).Assembly);
+          resourceMan = temp;
+        }
+        return resourceMan;
+      }
+    }
+
+    /// <summary>
+    ///   Overrides the current thread's CurrentUICulture property for all
+    ///   resource lookups using this strongly typed resource class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Globalization.CultureInfo Culture
+    {
+      get
+      {
+        return resourceCulture;
+      }
+      set
+      {
+        resourceCulture = value;
+      }
+    }
+  }
+}
diff --git a/StartBlockPuzzle/Properties/Resources.resx b/StartBlockPuzzle/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/StartBlockPuzzle/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/StartBlockPuzzle/Properties/Settings.Designer.cs b/StartBlockPuzzle/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..dbeab8a
--- /dev/null
+++ b/StartBlockPuzzle/Properties/Settings.Designer.cs
@@ -0,0 +1,30 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace StartBlockPuzzle.Properties
+{
+
+
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
+  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
+  {
+
+    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+    public static Settings Default
+    {
+      get
+      {
+        return defaultInstance;
+      }
+    }
+  }
+}
diff --git a/StartBlockPuzzle/Properties/Settings.settings b/StartBlockPuzzle/Properties/Settings.settings
new file mode 100644
index 0000000..3964565
--- /dev/null
+++ b/StartBlockPuzzle/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
diff --git a/StartBlockPuzzle/StartBlockPuzzle.csproj b/StartBlockPuzzle/StartBlockPuzzle.csproj
new file mode 100644
index 0000000..6014e13
--- /dev/null
+++ b/StartBlockPuzzle/StartBlockPuzzle.csproj
@@ -0,0 +1,74 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{F7BBA0A1-7FBF-434B-99E6-2265CC38139F}</ProjectGuid>
+    <OutputType>WinExe</OutputType>
+    <RootNamespace>StartBlockPuzzle</RootNamespace>
+    <AssemblyName>StartBlockPuzzle</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Deployment" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Program.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+      <SubType>Designer</SubType>
+    </EmbeddedResource>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/ViewWindowsForms/Properties/AssemblyInfo.cs b/ViewWindowsForms/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..0428f56
--- /dev/null
+++ b/ViewWindowsForms/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ViewWindowsForms")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ViewWindowsForms")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("4db0be87-3220-48f9-ba6f-c0a996cb2e9d")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/ViewWindowsForms/ViewWindows.cs b/ViewWindowsForms/ViewWindows.cs
new file mode 100644
index 0000000..1ed5757
--- /dev/null
+++ b/ViewWindowsForms/ViewWindows.cs
@@ -0,0 +1,41 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Drawing;
+using System.Linq;
+using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace ViewWindowsForms
+{
+  class ViewWindows
+  {
+    /// <summary>
+    /// Рисование с использованием технологии двойной буферизации
+    /// </summary>
+    private BufferedGraphics _BufferedGraphics = null;
+    public RectangleF[][] FieldRectangles
+    {
+      get;
+      set;
+    }
+
+    public Form GameForm
+    {
+      get;
+      set;
+    }
+    private Thread thread;
+
+    public ViewWindows()
+    {
+      GameForm = new Form();
+      GameForm.FormBorderStyle = FormBorderStyle.FixedSingle;
+      Graphics targetGraphics = _PanelDrawing.CreateGraphics();
+      Rectangle targetRectangle = _PanelDrawing.ClientRectangle;
+      _BufferedGraphics = BufferedGraphicsManager.Current.Allocate(targetGraphics, targetRectangle);
+      FieldRectangles = new RectangleF[][];
+    }
+  }
+}
diff --git a/ViewWindowsForms/ViewWindowsForms.csproj b/ViewWindowsForms/ViewWindowsForms.csproj
new file mode 100644
index 0000000..af07b8b
--- /dev/null
+++ b/ViewWindowsForms/ViewWindowsForms.csproj
@@ -0,0 +1,50 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{4DB0BE87-3220-48F9-BA6F-C0A996CB2E9D}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>ViewWindowsForms</RootNamespace>
+    <AssemblyName>ViewWindowsForms</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="ViewWindows.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/WpfApp1/App.config b/WpfApp1/App.config
new file mode 100644
index 0000000..731f6de
--- /dev/null
+++ b/WpfApp1/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/WpfApp1/App.xaml b/WpfApp1/App.xaml
new file mode 100644
index 0000000..2e70522
--- /dev/null
+++ b/WpfApp1/App.xaml
@@ -0,0 +1,9 @@
+﻿<Application x:Class="WpfApp1.App"
+             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+             xmlns:local="clr-namespace:WpfApp1"
+             StartupUri="MainWindow.xaml">
+    <Application.Resources>
+         
+    </Application.Resources>
+</Application>
diff --git a/WpfApp1/App.xaml.cs b/WpfApp1/App.xaml.cs
new file mode 100644
index 0000000..0a2c5be
--- /dev/null
+++ b/WpfApp1/App.xaml.cs
@@ -0,0 +1,17 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Configuration;
+using System.Data;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Windows;
+
+namespace WpfApp1
+{
+  /// <summary>
+  /// Interaction logic for App.xaml
+  /// </summary>
+  public partial class App : Application
+  {
+  }
+}
diff --git a/WpfApp1/MainWindow.xaml b/WpfApp1/MainWindow.xaml
new file mode 100644
index 0000000..1534e78
--- /dev/null
+++ b/WpfApp1/MainWindow.xaml
@@ -0,0 +1,12 @@
+﻿<Window x:Class="WpfApp1.MainWindow"
+        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+        xmlns:local="clr-namespace:WpfApp1"
+        mc:Ignorable="d"
+        Title="MainWindow" Height="450" Width="800">
+    <Grid>
+        
+    </Grid>
+</Window>
diff --git a/WpfApp1/MainWindow.xaml.cs b/WpfApp1/MainWindow.xaml.cs
new file mode 100644
index 0000000..dd28864
--- /dev/null
+++ b/WpfApp1/MainWindow.xaml.cs
@@ -0,0 +1,28 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows;
+using System.Windows.Controls;
+using System.Windows.Data;
+using System.Windows.Documents;
+using System.Windows.Input;
+using System.Windows.Media;
+using System.Windows.Media.Imaging;
+using System.Windows.Navigation;
+using System.Windows.Shapes;
+
+namespace WpfApp1
+{
+  /// <summary>
+  /// Interaction logic for MainWindow.xaml
+  /// </summary>
+  public partial class MainWindow : Window
+  {
+    public MainWindow()
+    {
+      InitializeComponent();
+    }
+  }
+}
diff --git a/WpfApp1/Properties/AssemblyInfo.cs b/WpfApp1/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..b504e66
--- /dev/null
+++ b/WpfApp1/Properties/AssemblyInfo.cs
@@ -0,0 +1,55 @@
+﻿using System.Reflection;
+using System.Resources;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+using System.Windows;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("WpfApp1")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("WpfApp1")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+//In order to begin building localizable applications, set
+//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
+//inside a <PropertyGroup>.  For example, if you are using US english
+//in your source files, set the <UICulture> to en-US.  Then uncomment
+//the NeutralResourceLanguage attribute below.  Update the "en-US" in
+//the line below to match the UICulture setting in the project file.
+
+//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]
+
+
+[assembly: ThemeInfo(
+    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
+                                     //(used if a resource is not found in the page,
+                                     // or application resource dictionaries)
+    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
+                                              //(used if a resource is not found in the page,
+                                              // app, or any theme specific resource dictionaries)
+)]
+
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/WpfApp1/Properties/Resources.Designer.cs b/WpfApp1/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..e015690
--- /dev/null
+++ b/WpfApp1/Properties/Resources.Designer.cs
@@ -0,0 +1,71 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace WpfApp1.Properties
+{
+
+
+  /// <summary>
+  ///   A strongly-typed resource class, for looking up localized strings, etc.
+  /// </summary>
+  // This class was auto-generated by the StronglyTypedResourceBuilder
+  // class via a tool like ResGen or Visual Studio.
+  // To add or remove a member, edit your .ResX file then rerun ResGen
+  // with the /str option, or rebuild your VS project.
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  internal class Resources
+  {
+
+    private static global::System.Resources.ResourceManager resourceMan;
+
+    private static global::System.Globalization.CultureInfo resourceCulture;
+
+    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+    internal Resources()
+    {
+    }
+
+    /// <summary>
+    ///   Returns the cached ResourceManager instance used by this class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Resources.ResourceManager ResourceManager
+    {
+      get
+      {
+        if ((resourceMan == null))
+        {
+          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WpfApp1.Properties.Resources", typeof(Resources).Assembly);
+          resourceMan = temp;
+        }
+        return resourceMan;
+      }
+    }
+
+    /// <summary>
+    ///   Overrides the current thread's CurrentUICulture property for all
+    ///   resource lookups using this strongly typed resource class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Globalization.CultureInfo Culture
+    {
+      get
+      {
+        return resourceCulture;
+      }
+      set
+      {
+        resourceCulture = value;
+      }
+    }
+  }
+}
diff --git a/WpfApp1/Properties/Resources.resx b/WpfApp1/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/WpfApp1/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/WpfApp1/Properties/Settings.Designer.cs b/WpfApp1/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..6735d52
--- /dev/null
+++ b/WpfApp1/Properties/Settings.Designer.cs
@@ -0,0 +1,30 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace WpfApp1.Properties
+{
+
+
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
+  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
+  {
+
+    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+    public static Settings Default
+    {
+      get
+      {
+        return defaultInstance;
+      }
+    }
+  }
+}
diff --git a/WpfApp1/Properties/Settings.settings b/WpfApp1/Properties/Settings.settings
new file mode 100644
index 0000000..033d7a5
--- /dev/null
+++ b/WpfApp1/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
\ No newline at end of file
diff --git a/WpfApp1/WpfApp1.csproj b/WpfApp1/WpfApp1.csproj
new file mode 100644
index 0000000..1f82efb
--- /dev/null
+++ b/WpfApp1/WpfApp1.csproj
@@ -0,0 +1,98 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{C4F78D5D-8DBB-4599-B0CB-AD8822342023}</ProjectGuid>
+    <OutputType>WinExe</OutputType>
+    <RootNamespace>WpfApp1</RootNamespace>
+    <AssemblyName>WpfApp1</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
+    <WarningLevel>4</WarningLevel>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Xml" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xaml">
+      <RequiredTargetFramework>4.0</RequiredTargetFramework>
+    </Reference>
+    <Reference Include="WindowsBase" />
+    <Reference Include="PresentationCore" />
+    <Reference Include="PresentationFramework" />
+  </ItemGroup>
+  <ItemGroup>
+    <ApplicationDefinition Include="App.xaml">
+      <Generator>MSBuild:Compile</Generator>
+      <SubType>Designer</SubType>
+    </ApplicationDefinition>
+    <Page Include="MainWindow.xaml">
+      <Generator>MSBuild:Compile</Generator>
+      <SubType>Designer</SubType>
+    </Page>
+    <Compile Include="App.xaml.cs">
+      <DependentUpon>App.xaml</DependentUpon>
+      <SubType>Code</SubType>
+    </Compile>
+    <Compile Include="MainWindow.xaml.cs">
+      <DependentUpon>MainWindow.xaml</DependentUpon>
+      <SubType>Code</SubType>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Properties\AssemblyInfo.cs">
+      <SubType>Code</SubType>
+    </Compile>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DesignTime>True</DesignTime>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+    </EmbeddedResource>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file

commit 097cee606544e39f2aca13d4eb0e8881f67dbc9a
Merge: e7e2e29 70c6eb6
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 12:47:12 2019 +0300

    Merge branch 'master' into WindowsForms

commit 70c6eb6f1900c553d1b1b96ec401c7f301b75c82
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 12:45:22 2019 +0300

    Core

diff --git a/BlockPuzzle.sln b/BlockPuzzle.sln
index 5a0c5bf..2a3ef8d 100644
--- a/BlockPuzzle.sln
+++ b/BlockPuzzle.sln
@@ -9,6 +9,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Model", "Model\Model.csproj
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "View", "View\View.csproj", "{3731401D-E76A-43EF-B549-74CB37C6B074}"
 EndProject
+Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Core", "Core", "{66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -31,6 +33,11 @@ Global
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
 	EndGlobalSection
+	GlobalSection(NestedProjects) = preSolution
+		{67DC37B6-3215-41F2-8A52-76E761E2CA64} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
+		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
+		{3731401D-E76A-43EF-B549-74CB37C6B074} = {66D5D95C-3E0B-4137-8C53-BA3F55AF1AA2}
+	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {46EA8955-6026-4BB8-8372-120145E4C297}
 	EndGlobalSection
diff --git a/ControlWindow/Class1.cs b/ControlWindow/Class1.cs
new file mode 100644
index 0000000..a5f4e56
--- /dev/null
+++ b/ControlWindow/Class1.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace ControlWindow
+{
+    public class Class1
+    {
+    }
+}
diff --git a/ControlWindow/ControlWindow.csproj b/ControlWindow/ControlWindow.csproj
new file mode 100644
index 0000000..e634ddf
--- /dev/null
+++ b/ControlWindow/ControlWindow.csproj
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>736c5cdb-e30b-4973-a4c2-2767eb3c1087</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>ControlWindow</RootNamespace>
+    <AssemblyName>ControlWindow</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System"/>
+    
+    <Reference Include="System.Core"/>
+    <Reference Include="System.Xml.Linq"/>
+    <Reference Include="System.Data.DataSetExtensions"/>
+    
+    
+    <Reference Include="Microsoft.CSharp"/>
+    
+    <Reference Include="System.Data"/>
+    
+    <Reference Include="System.Net.Http"/>
+    
+    <Reference Include="System.Xml"/>
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Class1.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+ </Project>
diff --git a/ControlWindow/Properties/AssemblyInfo.cs b/ControlWindow/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..5812505
--- /dev/null
+++ b/ControlWindow/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ControlWindow")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ControlWindow")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("736c5cdb-e30b-4973-a4c2-2767eb3c1087")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/ControlerWindow/ControlerWindow.csproj b/ControlerWindow/ControlerWindow.csproj
new file mode 100644
index 0000000..c9150f0
--- /dev/null
+++ b/ControlerWindow/ControlerWindow.csproj
@@ -0,0 +1,47 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{1FDD8153-25A1-44F2-BDF0-8D149F718F04}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>ControlerWindow</RootNamespace>
+    <AssemblyName>ControlerWindow</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/ControlerWindow/Properties/AssemblyInfo.cs b/ControlerWindow/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..1c59ac7
--- /dev/null
+++ b/ControlerWindow/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ControlerWindow")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ControlerWindow")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("1fdd8153-25a1-44f2-bdf0-8d149f718f04")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/StartProjectBlockPuzzle/App.config b/StartProjectBlockPuzzle/App.config
new file mode 100644
index 0000000..731f6de
--- /dev/null
+++ b/StartProjectBlockPuzzle/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/StartProjectBlockPuzzle/Form1.Designer.cs b/StartProjectBlockPuzzle/Form1.Designer.cs
new file mode 100644
index 0000000..0980949
--- /dev/null
+++ b/StartProjectBlockPuzzle/Form1.Designer.cs
@@ -0,0 +1,40 @@
+﻿namespace StartProjectBlockPuzzle
+{
+  partial class Form1
+  {
+    /// <summary>
+    /// Required designer variable.
+    /// </summary>
+    private System.ComponentModel.IContainer components = null;
+
+    /// <summary>
+    /// Clean up any resources being used.
+    /// </summary>
+    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+    protected override void Dispose(bool disposing)
+    {
+      if (disposing && (components != null))
+      {
+        components.Dispose();
+      }
+      base.Dispose(disposing);
+    }
+
+    #region Windows Form Designer generated code
+
+    /// <summary>
+    /// Required method for Designer support - do not modify
+    /// the contents of this method with the code editor.
+    /// </summary>
+    private void InitializeComponent()
+    {
+      this.components = new System.ComponentModel.Container();
+      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+      this.ClientSize = new System.Drawing.Size(800, 450);
+      this.Text = "Form1";
+    }
+
+    #endregion
+  }
+}
+
diff --git a/StartProjectBlockPuzzle/Form1.cs b/StartProjectBlockPuzzle/Form1.cs
new file mode 100644
index 0000000..1b76645
--- /dev/null
+++ b/StartProjectBlockPuzzle/Form1.cs
@@ -0,0 +1,20 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data;
+using System.Drawing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace StartProjectBlockPuzzle
+{
+  public partial class Form1 : Form
+  {
+    public Form1()
+    {
+      InitializeComponent();
+    }
+  }
+}
diff --git a/StartProjectBlockPuzzle/Program.cs b/StartProjectBlockPuzzle/Program.cs
new file mode 100644
index 0000000..e2eec90
--- /dev/null
+++ b/StartProjectBlockPuzzle/Program.cs
@@ -0,0 +1,22 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace StartProjectBlockPuzzle
+{
+  static class Program
+  {
+    /// <summary>
+    /// The main entry point for the application.
+    /// </summary>
+    [STAThread]
+    static void Main()
+    {
+      Application.EnableVisualStyles();
+      Application.SetCompatibleTextRenderingDefault(false);
+      Application.Run(new Form1());
+    }
+  }
+}
diff --git a/StartProjectBlockPuzzle/Properties/AssemblyInfo.cs b/StartProjectBlockPuzzle/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..2e8be99
--- /dev/null
+++ b/StartProjectBlockPuzzle/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("StartProjectBlockPuzzle")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("StartProjectBlockPuzzle")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("0a0652bb-82ba-4b08-9ba9-eff609c54084")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/StartProjectBlockPuzzle/Properties/Resources.Designer.cs b/StartProjectBlockPuzzle/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..7336945
--- /dev/null
+++ b/StartProjectBlockPuzzle/Properties/Resources.Designer.cs
@@ -0,0 +1,71 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace StartProjectBlockPuzzle.Properties
+{
+
+
+  /// <summary>
+  ///   A strongly-typed resource class, for looking up localized strings, etc.
+  /// </summary>
+  // This class was auto-generated by the StronglyTypedResourceBuilder
+  // class via a tool like ResGen or Visual Studio.
+  // To add or remove a member, edit your .ResX file then rerun ResGen
+  // with the /str option, or rebuild your VS project.
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  internal class Resources
+  {
+
+    private static global::System.Resources.ResourceManager resourceMan;
+
+    private static global::System.Globalization.CultureInfo resourceCulture;
+
+    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+    internal Resources()
+    {
+    }
+
+    /// <summary>
+    ///   Returns the cached ResourceManager instance used by this class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Resources.ResourceManager ResourceManager
+    {
+      get
+      {
+        if ((resourceMan == null))
+        {
+          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("StartProjectBlockPuzzle.Properties.Resources", typeof(Resources).Assembly);
+          resourceMan = temp;
+        }
+        return resourceMan;
+      }
+    }
+
+    /// <summary>
+    ///   Overrides the current thread's CurrentUICulture property for all
+    ///   resource lookups using this strongly typed resource class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Globalization.CultureInfo Culture
+    {
+      get
+      {
+        return resourceCulture;
+      }
+      set
+      {
+        resourceCulture = value;
+      }
+    }
+  }
+}
diff --git a/StartProjectBlockPuzzle/Properties/Resources.resx b/StartProjectBlockPuzzle/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/StartProjectBlockPuzzle/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/StartProjectBlockPuzzle/Properties/Settings.Designer.cs b/StartProjectBlockPuzzle/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..fdf8d4d
--- /dev/null
+++ b/StartProjectBlockPuzzle/Properties/Settings.Designer.cs
@@ -0,0 +1,30 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace StartProjectBlockPuzzle.Properties
+{
+
+
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
+  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
+  {
+
+    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+    public static Settings Default
+    {
+      get
+      {
+        return defaultInstance;
+      }
+    }
+  }
+}
diff --git a/StartProjectBlockPuzzle/Properties/Settings.settings b/StartProjectBlockPuzzle/Properties/Settings.settings
new file mode 100644
index 0000000..3964565
--- /dev/null
+++ b/StartProjectBlockPuzzle/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
diff --git a/StartProjectBlockPuzzle/StartProjectBlockPuzzle.csproj b/StartProjectBlockPuzzle/StartProjectBlockPuzzle.csproj
new file mode 100644
index 0000000..e44ddc6
--- /dev/null
+++ b/StartProjectBlockPuzzle/StartProjectBlockPuzzle.csproj
@@ -0,0 +1,80 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{0A0652BB-82BA-4B08-9BA9-EFF609C54084}</ProjectGuid>
+    <OutputType>WinExe</OutputType>
+    <RootNamespace>StartProjectBlockPuzzle</RootNamespace>
+    <AssemblyName>StartProjectBlockPuzzle</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Deployment" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Form1.cs">
+      <SubType>Form</SubType>
+    </Compile>
+    <Compile Include="Form1.Designer.cs">
+      <DependentUpon>Form1.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Program.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+      <SubType>Designer</SubType>
+    </EmbeddedResource>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/View/View.csproj b/View/View.csproj
index 920e02c..2e7af08 100644
--- a/View/View.csproj
+++ b/View/View.csproj
@@ -33,6 +33,8 @@
   <ItemGroup>
     <Reference Include="System" />
     <Reference Include="System.Core" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Windows.Forms" />
     <Reference Include="System.Xml.Linq" />
     <Reference Include="System.Data.DataSetExtensions" />
     <Reference Include="Microsoft.CSharp" />
diff --git a/ViewWindow/Class1.cs b/ViewWindow/Class1.cs
new file mode 100644
index 0000000..8ca37e8
--- /dev/null
+++ b/ViewWindow/Class1.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace ViewWindow
+{
+    public class Class1
+    {
+    }
+}
diff --git a/ViewWindow/GamePlayForm.Designer.cs b/ViewWindow/GamePlayForm.Designer.cs
new file mode 100644
index 0000000..b117105
--- /dev/null
+++ b/ViewWindow/GamePlayForm.Designer.cs
@@ -0,0 +1,39 @@
+﻿namespace ViewWindow
+{
+  partial class GamePlayForm
+  {
+    /// <summary>
+    /// Required designer variable.
+    /// </summary>
+    private System.ComponentModel.IContainer components = null;
+
+    /// <summary>
+    /// Clean up any resources being used.
+    /// </summary>
+    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+    protected override void Dispose(bool disposing)
+    {
+      if (disposing && (components != null))
+      {
+        components.Dispose();
+      }
+      base.Dispose(disposing);
+    }
+
+    #region Windows Form Designer generated code
+
+    /// <summary>
+    /// Required method for Designer support - do not modify
+    /// the contents of this method with the code editor.
+    /// </summary>
+    private void InitializeComponent()
+    {
+      this.components = new System.ComponentModel.Container();
+      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+      this.ClientSize = new System.Drawing.Size(800, 450);
+      this.Text = "GamePlayForm";
+    }
+
+    #endregion
+  }
+}
\ No newline at end of file
diff --git a/ViewWindow/GamePlayForm.cs b/ViewWindow/GamePlayForm.cs
new file mode 100644
index 0000000..fa86082
--- /dev/null
+++ b/ViewWindow/GamePlayForm.cs
@@ -0,0 +1,20 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data;
+using System.Drawing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace ViewWindow
+{
+  public partial class GamePlayForm : Form
+  {
+    public GamePlayForm()
+    {
+      InitializeComponent();
+    }
+  }
+}
diff --git a/ViewWindow/Properties/AssemblyInfo.cs b/ViewWindow/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..7568745
--- /dev/null
+++ b/ViewWindow/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ViewWindow")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ViewWindow")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("12136697-d3dd-43da-b287-7aab5445ee9c")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/ViewWindow/ViewWindow.csproj b/ViewWindow/ViewWindow.csproj
new file mode 100644
index 0000000..baf55a0
--- /dev/null
+++ b/ViewWindow/ViewWindow.csproj
@@ -0,0 +1,56 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{12136697-D3DD-43DA-B287-7AAB5445EE9C}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>ViewWindow</RootNamespace>
+    <AssemblyName>ViewWindow</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Class1.cs" />
+    <Compile Include="GamePlayForm.cs">
+      <SubType>Form</SubType>
+    </Compile>
+    <Compile Include="GamePlayForm.Designer.cs">
+      <DependentUpon>GamePlayForm.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/ViewWindows/App.config b/ViewWindows/App.config
new file mode 100644
index 0000000..731f6de
--- /dev/null
+++ b/ViewWindows/App.config
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
+    </startup>
+</configuration>
\ No newline at end of file
diff --git a/ViewWindows/Form1.Designer.cs b/ViewWindows/Form1.Designer.cs
new file mode 100644
index 0000000..554a1d3
--- /dev/null
+++ b/ViewWindows/Form1.Designer.cs
@@ -0,0 +1,40 @@
+﻿namespace ViewWindows
+{
+  partial class Form1
+  {
+    /// <summary>
+    /// Required designer variable.
+    /// </summary>
+    private System.ComponentModel.IContainer components = null;
+
+    /// <summary>
+    /// Clean up any resources being used.
+    /// </summary>
+    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+    protected override void Dispose(bool disposing)
+    {
+      if (disposing && (components != null))
+      {
+        components.Dispose();
+      }
+      base.Dispose(disposing);
+    }
+
+    #region Windows Form Designer generated code
+
+    /// <summary>
+    /// Required method for Designer support - do not modify
+    /// the contents of this method with the code editor.
+    /// </summary>
+    private void InitializeComponent()
+    {
+      this.components = new System.ComponentModel.Container();
+      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+      this.ClientSize = new System.Drawing.Size(800, 450);
+      this.Text = "Form1";
+    }
+
+    #endregion
+  }
+}
+
diff --git a/ViewWindows/Form1.cs b/ViewWindows/Form1.cs
new file mode 100644
index 0000000..b6d0a4f
--- /dev/null
+++ b/ViewWindows/Form1.cs
@@ -0,0 +1,20 @@
+﻿using System;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data;
+using System.Drawing;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace ViewWindows
+{
+  public partial class Form1 : Form
+  {
+    public Form1()
+    {
+      InitializeComponent();
+    }
+  }
+}
diff --git a/ViewWindows/Program.cs b/ViewWindows/Program.cs
new file mode 100644
index 0000000..f1bbc62
--- /dev/null
+++ b/ViewWindows/Program.cs
@@ -0,0 +1,22 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Windows.Forms;
+
+namespace ViewWindows
+{
+  static class Program
+  {
+    /// <summary>
+    /// The main entry point for the application.
+    /// </summary>
+    [STAThread]
+    static void Main()
+    {
+      Application.EnableVisualStyles();
+      Application.SetCompatibleTextRenderingDefault(false);
+      Application.Run(new Form1());
+    }
+  }
+}
diff --git a/ViewWindows/Properties/AssemblyInfo.cs b/ViewWindows/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..5f4f656
--- /dev/null
+++ b/ViewWindows/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ViewWindows")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ViewWindows")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("dad7ee2a-daec-4706-85a2-599434357162")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/ViewWindows/Properties/Resources.Designer.cs b/ViewWindows/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..c19e66b
--- /dev/null
+++ b/ViewWindows/Properties/Resources.Designer.cs
@@ -0,0 +1,71 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace ViewWindows.Properties
+{
+
+
+  /// <summary>
+  ///   A strongly-typed resource class, for looking up localized strings, etc.
+  /// </summary>
+  // This class was auto-generated by the StronglyTypedResourceBuilder
+  // class via a tool like ResGen or Visual Studio.
+  // To add or remove a member, edit your .ResX file then rerun ResGen
+  // with the /str option, or rebuild your VS project.
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  internal class Resources
+  {
+
+    private static global::System.Resources.ResourceManager resourceMan;
+
+    private static global::System.Globalization.CultureInfo resourceCulture;
+
+    [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+    internal Resources()
+    {
+    }
+
+    /// <summary>
+    ///   Returns the cached ResourceManager instance used by this class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Resources.ResourceManager ResourceManager
+    {
+      get
+      {
+        if ((resourceMan == null))
+        {
+          global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ViewWindows.Properties.Resources", typeof(Resources).Assembly);
+          resourceMan = temp;
+        }
+        return resourceMan;
+      }
+    }
+
+    /// <summary>
+    ///   Overrides the current thread's CurrentUICulture property for all
+    ///   resource lookups using this strongly typed resource class.
+    /// </summary>
+    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+    internal static global::System.Globalization.CultureInfo Culture
+    {
+      get
+      {
+        return resourceCulture;
+      }
+      set
+      {
+        resourceCulture = value;
+      }
+    }
+  }
+}
diff --git a/ViewWindows/Properties/Resources.resx b/ViewWindows/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/ViewWindows/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/ViewWindows/Properties/Settings.Designer.cs b/ViewWindows/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..9433868
--- /dev/null
+++ b/ViewWindows/Properties/Settings.Designer.cs
@@ -0,0 +1,30 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.42000
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace ViewWindows.Properties
+{
+
+
+  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
+  internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
+  {
+
+    private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+    public static Settings Default
+    {
+      get
+      {
+        return defaultInstance;
+      }
+    }
+  }
+}
diff --git a/ViewWindows/Properties/Settings.settings b/ViewWindows/Properties/Settings.settings
new file mode 100644
index 0000000..3964565
--- /dev/null
+++ b/ViewWindows/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
diff --git a/ViewWindows/ViewWindows.csproj b/ViewWindows/ViewWindows.csproj
new file mode 100644
index 0000000..a6367cd
--- /dev/null
+++ b/ViewWindows/ViewWindows.csproj
@@ -0,0 +1,80 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{DAD7EE2A-DAEC-4706-85A2-599434357162}</ProjectGuid>
+    <OutputType>WinExe</OutputType>
+    <RootNamespace>ViewWindows</RootNamespace>
+    <AssemblyName>ViewWindows</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Deployment" />
+    <Reference Include="System.Drawing" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Windows.Forms" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Form1.cs">
+      <SubType>Form</SubType>
+    </Compile>
+    <Compile Include="Form1.Designer.cs">
+      <DependentUpon>Form1.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Program.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+      <SubType>Designer</SubType>
+    </EmbeddedResource>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file

commit e7e2e29d8b936e85886546f17cc8538f0f82029c
Merge: 1cb4ec4 f11e1e0
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 10:42:05 2019 +0300

    Merge branch 'master' into WindowsForms

commit f11e1e0326706c68512ffac39aefa04d239a1a0a
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 10:12:11 2019 +0300

    PointerC

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 4c7696a..7dcf9eb 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -78,6 +78,8 @@ namespace Model
         ActiveFigureNumber = _pseudoRandomNumberGenerator.Next(0, FiguresShapes.Figures.Length);
         DeleteFilledRowsAndColumns();
         Score += FiguresShapes.Figures[ActiveFigureNumber].PointsForFigure;
+        PointerCoordinates.X = 4;
+        PointerCoordinates.Y = 3;
       }
     }
 

commit 1cb4ec47e68104469fc72bcfaa6085bfcb536528
Merge: 9d7f540 8caad56
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 09:25:16 2019 +0300

    Merge branch 'master' into WindowsForms

commit 8caad56908e705825cdcb449cdcddca24893ec02
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 16 09:24:27 2019 +0300

    EndM

diff --git a/Model/Objects/FigureCodeKeeper.cs b/Model/Objects/FigureCodeKeeper.cs
index 96d6440..edc6877 100644
--- a/Model/Objects/FigureCodeKeeper.cs
+++ b/Model/Objects/FigureCodeKeeper.cs
@@ -23,6 +23,5 @@ namespace Model.Objects
         return _figuresCodes;
       }
     }
-
   }
 }

commit 357b31441120c83e78643c3a9ad57ea646e929d6
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 15 22:55:35 2019 +0300

    EndedModel

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 1e10673..4c7696a 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -48,17 +48,37 @@ namespace Model
       GameField = new Field(COUNT_ROW, COUNT_COLUMN);
       FiguresShapes = new FiguresShapes(FigureCodeKeeper.FiguresCodes);
     }
+  
+    public bool CanWePlaceFigure()
+    {
+      for (int i = 0; i < FiguresShapes.Figures[ActiveFigureNumber].HeightFigure; i++)
+      {
+        for (int j = 0; j < FiguresShapes.Figures[ActiveFigureNumber].WidthFigure; j++)
+        {
+          if (!(FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j].IsFull && GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X].IsFull))
+          {
+            return false;
+          }
+        }
+      }
+      return true;
+    }
 
     public void PutTheFigure()
     {
-      for (int i = 0; i < Figure.FIGURE_SIZE; i++)
+      if (CanWePlaceFigure())
       {
-        for (int j = 0; j < Figure.FIGURE_SIZE; j++)
+        for (int i = 0; i < Figure.FIGURE_SIZE; i++)
         {
-          GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
+          for (int j = 0; j < Figure.FIGURE_SIZE; j++)
+          {
+            GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
+          }
         }
+        ActiveFigureNumber = _pseudoRandomNumberGenerator.Next(0, FiguresShapes.Figures.Length);
+        DeleteFilledRowsAndColumns();
+        Score += FiguresShapes.Figures[ActiveFigureNumber].PointsForFigure;
       }
-      ActiveFigureNumber = _pseudoRandomNumberGenerator.Next(0, FiguresShapes.Figures.Length);
     }
 
     public void DeleteFilledRowsAndColumns()
@@ -73,10 +93,25 @@ namespace Model
           }
         }
       }
-
-      for (int i = 0; i < GameField.PlayingField[]; i++)
+      Cell[] columnCells = new Cell[COUNT_ROW];
+      for (int i = 0; i < COUNT_COLUMN; i++)
       {
+        for (int j = 0; j < COUNT_ROW; j++)
+        {
+          columnCells[j] = GameField.PlayingField[j][i];
+        }
+        if (IsFullCellsSet(columnCells))
+        {
+          ClearColumn(i);
+        }
+      }
+    }
 
+    public void ClearColumn(int parI)
+    {
+      for (int j = 0; j < COUNT_ROW; j++)
+      {
+        GameField.PlayingField[j][parI].IsFull = false;
       }
     }
 
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index e0170ae..93a6f83 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -25,6 +25,11 @@ namespace Model
       set;
     }
 
+    public int PointsForFigure
+    {
+      get;
+    }
+
     public int HeightFigure
     {
       get;
@@ -42,6 +47,7 @@ namespace Model
           {
             WidthFigure = j + 1;
             HeightFigure = i + 1;
+            PointsForFigure++;
           }
         }
       }

commit b17c7c7407804ebfa827af307e6804b42deae909
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 15 13:29:39 2019 +0300

    row

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 2b1748b..1e10673 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -37,6 +37,12 @@ namespace Model
       set;
     }
 
+    public int Score
+    {
+      get;
+      set;
+    }
+
     public ModelGamePlay()
     {
       GameField = new Field(COUNT_ROW, COUNT_COLUMN);
@@ -57,13 +63,21 @@ namespace Model
 
     public void DeleteFilledRowsAndColumns()
     {
-      for (int i = 0; i < COUNT_ROW; i++)
+      foreach (Cell[] cells in GameField.PlayingField)
       {
-        if (IsFullCellsSet(GameField.PlayingField[i]))
-        { 
-
+        if (IsFullCellsSet(cells))
+        {
+          foreach (Cell cell in cells)
+          {
+            cell.IsFull = false;
+          }
         }
       }
+
+      for (int i = 0; i < GameField.PlayingField[]; i++)
+      {
+
+      }
     }
 
     public bool IsFullCellsSet(Cell[] parCellsSet)

commit 97d87c695fdb6717949a1404558e85dd0dc9aef5
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 15 11:28:34 2019 +0300

    IsFull

diff --git a/Controller/Controller.csproj b/Controller/Controller.csproj
index 0772303..706d569 100644
--- a/Controller/Controller.csproj
+++ b/Controller/Controller.csproj
@@ -56,6 +56,10 @@
       <Project>{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}</Project>
       <Name>Model</Name>
     </ProjectReference>
+    <ProjectReference Include="..\View\View.csproj">
+      <Project>{3731401D-E76A-43EF-B549-74CB37C6B074}</Project>
+      <Name>View</Name>
+    </ProjectReference>
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index 66a3eba..99f2f92 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -5,22 +5,23 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
+using View;
 
 namespace Controller
 {
   public class ControllerGamePlay
   {
     private ModelGamePlay _modelGamePlay;
+    private ViewGamePlay _viewGamePlay;
     public event dMoveRight OnClickButtonRight;
     public event dMoveLeft OnClickButtonLeft;
     public event dMoveUp OnClickButtonUp;
     public event dMoveDown OnClickButtonDown;
 
-    public ControllerGamePlay()
+    public ControllerGamePlay(ModelGamePlay parModelGamePlay, ViewGamePlay parViewGamePlay)
     {
-      _modelGamePlay = new ModelGamePlay();
+      _modelGamePlay = parModelGamePlay;
+      _viewGamePlay = parViewGamePlay;
     }
-
-
   }
 }
\ No newline at end of file
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index d1ee5b5..2b1748b 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -11,7 +11,7 @@ namespace Model
   {
     private const int COUNT_ROW = 10;
     private const int COUNT_COLUMN = 10;
-    private static Random _prng = new Random();
+    private static Random _pseudoRandomNumberGenerator = new Random();
 
     public int ActiveFigureNumber
     {
@@ -52,7 +52,30 @@ namespace Model
           GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
         }
       }
-      ActiveFigureNumber = _prng.Next(0, FiguresShapes.Figures.Length);
+      ActiveFigureNumber = _pseudoRandomNumberGenerator.Next(0, FiguresShapes.Figures.Length);
+    }
+
+    public void DeleteFilledRowsAndColumns()
+    {
+      for (int i = 0; i < COUNT_ROW; i++)
+      {
+        if (IsFullCellsSet(GameField.PlayingField[i]))
+        { 
+
+        }
+      }
+    }
+
+    public bool IsFullCellsSet(Cell[] parCellsSet)
+    {
+      foreach (Cell cell in parCellsSet)
+      {
+        if (!cell.IsFull)
+        {
+          return false;
+        }
+      }
+      return true;
     }
 
     public void MoveFigureUp()
diff --git a/Model/Objects/Cell.cs b/Model/Objects/Cell.cs
index 1963100..fa2b08a 100644
--- a/Model/Objects/Cell.cs
+++ b/Model/Objects/Cell.cs
@@ -8,7 +8,6 @@ namespace Model
 {
   public class Cell
   {
-    private bool _isFull;
     //private Сoordinates coordinates;
 
     //public Сoordinates Сoordinates
@@ -22,22 +21,15 @@ namespace Model
     //    coordinates = value;
     //  }
     //}
-
     public bool IsFull
     {
-      get
-      {
-        return _isFull;
-      }
-      set
-      {
-        _isFull = value;
-      }
+      get;
+      set;
     }
 
-    public Cell(bool isFull)
+    public Cell(bool parIsFull)
     {
-      _isFull = isFull;
+      IsFull = parIsFull;
     }
   }
 }
diff --git a/View/ViewGamePlay.cs b/View/ViewGamePlay.cs
index 8d33435..64a2d1d 100644
--- a/View/ViewGamePlay.cs
+++ b/View/ViewGamePlay.cs
@@ -6,8 +6,9 @@ using System.Threading.Tasks;
 
 namespace View
 {
-  public abstract class ViewGamePlay
+  public interface ViewGamePlay
   {
-
+    void DrawGameField();
+    void DrawActiveFigure();
   }
 }

commit 9d7f540f3f47e9f5935dcc0373a3ebc344234124
Merge: 1d00811 b45c837
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 15 06:39:46 2019 +0300

    Merge branch 'master' into WindowsForms

commit b45c837811d4c0ff041d40f1f6d8e27311aba5df
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 21:19:27 2019 +0300

    EndedM

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 637c00b..d1ee5b5 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -11,6 +11,7 @@ namespace Model
   {
     private const int COUNT_ROW = 10;
     private const int COUNT_COLUMN = 10;
+    private static Random _prng = new Random();
 
     public int ActiveFigureNumber
     {
@@ -51,7 +52,7 @@ namespace Model
           GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
         }
       }
-      ActiveFigureNumber = Random()
+      ActiveFigureNumber = _prng.Next(0, FiguresShapes.Figures.Length);
     }
 
     public void MoveFigureUp()

commit 2ca35e72a4d5f6de617c0b9d29b4633f5de5286f
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 20:36:50 2019 +0300

    Contr

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 077fa10..637c00b 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -51,6 +51,7 @@ namespace Model
           GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
         }
       }
+      ActiveFigureNumber = Random()
     }
 
     public void MoveFigureUp()

commit 1d00811c3356c21ed73ef5f0a00c28cf3bcd5f24
Merge: c263cc8 8ad944b
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 20:23:03 2019 +0300

    1

commit 8ad944b0fd578ea144d272fb4877ddceef5c558a
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 18:35:37 2019 +0300

    1

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index e5213d7..077fa10 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -4,7 +4,7 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
-
+//Merge from model to WindowsForms
 namespace Model
 {
   public class ModelGamePlay

commit c263cc8d2648ef5359cdee45ac4d3203f6b8fba8
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 14:10:07 2019 +0300

    TestC

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index e5213d7..a3cc69d 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -4,7 +4,7 @@ using System.Collections.Generic;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
-
+//This is Windows Forms!
 namespace Model
 {
   public class ModelGamePlay

commit a60c9e79ce46a9dcd56b5e5b2b6e6a0f2d400269
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 14 12:28:33 2019 +0300

    ModelEnded

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 135f7e5..e5213d7 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -46,9 +46,9 @@ namespace Model
     {
       for (int i = 0; i < Figure.FIGURE_SIZE; i++)
       {
-        for (int i = 0; i < length; i++)
+        for (int j = 0; j < Figure.FIGURE_SIZE; j++)
         {
-
+          GameField.PlayingField[i + PointerCoordinates.Y][j + PointerCoordinates.X] = FiguresShapes.Figures[ActiveFigureNumber].FigureShape[i][j];
         }
       }
     }
diff --git a/Model/Objects/Field.cs b/Model/Objects/Field.cs
index 7ddbfc1..d33ff7d 100644
--- a/Model/Objects/Field.cs
+++ b/Model/Objects/Field.cs
@@ -8,28 +8,21 @@ namespace Model
 {
   public class Field
   {
-    private Cell[][] _playingField;
-
     public Cell[][] PlayingField
     {
-      get
-      {
-        return _playingField;
-      }
-      set
-      {
-        _playingField = value;
-      }
+      get;
+      set;
     }
+
     public Field(int parRowCount, int parColomnCount)
     {
-      _playingField = new Cell[parRowCount][];
-      for (int i = 0; i < _playingField.Length; i++)
+      PlayingField = new Cell[parRowCount][];
+      for (int i = 0; i < PlayingField.Length; i++)
       {
-        _playingField[i] = new Cell[parColomnCount];
-        for (int j = 0; j < _playingField[i].Length; j++)
+        PlayingField[i] = new Cell[parColomnCount];
+        for (int j = 0; j < PlayingField[i].Length; j++)
         {
-          _playingField[i][j] = new Cell(false);
+          PlayingField[i][j] = new Cell(false);
         }
       }
     }

commit 6f2d194daba249bb07220c27e8e757426ef2a044
Author: kolay <kolaygreha@mail.ru>
Date:   Fri Dec 13 14:56:09 2019 +0300

    ModelPutF

diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index b120f90..66a3eba 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -11,7 +11,6 @@ namespace Controller
   public class ControllerGamePlay
   {
     private ModelGamePlay _modelGamePlay;
-    private View;
     public event dMoveRight OnClickButtonRight;
     public event dMoveLeft OnClickButtonLeft;
     public event dMoveUp OnClickButtonUp;
@@ -20,7 +19,6 @@ namespace Controller
     public ControllerGamePlay()
     {
       _modelGamePlay = new ModelGamePlay();
-      
     }
 
 
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index f804fb5..135f7e5 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -12,59 +12,73 @@ namespace Model
     private const int COUNT_ROW = 10;
     private const int COUNT_COLUMN = 10;
 
-    private Field _gameField;
-    private FiguresShapes _figuresShapes;
-    public Coordinates _pointerCoordinates { get; set; }
+    public int ActiveFigureNumber
+    {
+      get;
+      set;
+    }
 
+    public FiguresShapes FiguresShapes
+    {
+      get;
+      set;
+    }
+
+    public Coordinates PointerCoordinates
+    {
+      get;
+      set;
+    }
 
     public Field GameField
     {
-      get
-      {
-        return _gameField;
-      }
-      set
-      {
-        _gameField = value;
-      }
+      get;
+      set;
     }
 
     public ModelGamePlay()
     {
-      _gameField = new Field(COUNT_ROW, COUNT_COLUMN);
-      _figuresShapes = new FiguresShapes(FigureCodeKeeper.FiguresCodes);
+      GameField = new Field(COUNT_ROW, COUNT_COLUMN);
+      FiguresShapes = new FiguresShapes(FigureCodeKeeper.FiguresCodes);
     }
 
-    public void MoveFigureUp()
+    public void PutTheFigure()
     {
-      if (_pointerCoordinates.Y > 0)
+      for (int i = 0; i < Figure.FIGURE_SIZE; i++)
       {
-        _pointerCoordinates.Y -= 1;
+        for (int i = 0; i < length; i++)
+        {
 
+        }
       }
     }
+
     public void MoveFigureUp()
     {
-      if (_pointerCoordinates.Y > 0)
+      if (PointerCoordinates.Y > 0)
       {
-        _pointerCoordinates.Y -= 1;
-
+        PointerCoordinates.Y -= 1;
       }
     }
-    public void MoveFigureUp()
+    public void MoveFigureLeft()
     {
-      if (_pointerCoordinates.Y > 0)
+      if (PointerCoordinates.X > 0)
       {
-        _pointerCoordinates.Y -= 1;
-
+        PointerCoordinates.X -= 1;
       }
     }
-    public void MoveFigureUp()
+    public void MoveFigureDown()
     {
-      if (_pointerCoordinates.Y > 0)
+      if (PointerCoordinates.Y + FiguresShapes.Figures[ActiveFigureNumber].HeightFigure < COUNT_ROW)
       {
-        _pointerCoordinates.Y -= 1;
-
+        PointerCoordinates.Y += 1;
+      }
+    }
+    public void MoveFigureRight()
+    {
+      if (PointerCoordinates.Y + FiguresShapes.Figures[ActiveFigureNumber].WidthFigure < COUNT_COLUMN)
+      {
+        PointerCoordinates.X += 1;
       }
     }
 
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index f1c858b..e0170ae 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -8,58 +8,40 @@ namespace Model
 {
   public class Figure
   {
-    private const int FIGURE_SIZE = 3;
-    private Cell[][] _figureShape;
-    private int _widthFigure;
-    private int _heightFigure;
+    public static int FIGURE_SIZE
+    {
+      get;
+    } = 3;
 
-    public int HeightFigure
+    public Cell[][] FigureShape
     {
-      get
-      {
-        return _heightFigure;
-      }
-      set
-      {
-        _heightFigure = value;
-      }
+      get;
+      set;
     }
 
     public int WidthFigure
     {
-      get
-      {
-        return _widthFigure;
-      }
-      set
-      {
-        _widthFigure = value;
-      }
+      get;
+      set;
     }
 
-    public int FigureShape
+    public int HeightFigure
     {
-      get
-      {
-        return FigureShape;
-      }
-      set
-      {
-        FigureShape = value;
-      }
+      get;
+      set;
     }
 
-    public Figure(string parfigureCode)
+    public Figure(string parFigureCode)
     {
-      for (int i = 0; i < parfigureCode.Length; i++)
+      for (int i = 0; i < parFigureCode.Length; i++)
       {
-        for (int j = 0; j < FIGURE_SIZE; j++)
+        for (int j = 0; j < FIGURE_SIZE - 1; j++)
         {
-          _figureShape[i][j].IsFull = (parfigureCode[FIGURE_SIZE * i + j] == '1');
-          if (parfigureCode[FIGURE_SIZE * i + j] == '1')
+          FigureShape[i % FIGURE_SIZE][j].IsFull = (parFigureCode[FIGURE_SIZE * i + j] == '1');
+          if (parFigureCode[FIGURE_SIZE * i + j] == '1')
           {
-            _widthFigure = j + 1;
-            _heightFigure = i + 1;
+            WidthFigure = j + 1;
+            HeightFigure = i + 1;
           }
         }
       }
diff --git a/Model/Objects/FigureCodeKeeper.cs b/Model/Objects/FigureCodeKeeper.cs
index f7f83bf..96d6440 100644
--- a/Model/Objects/FigureCodeKeeper.cs
+++ b/Model/Objects/FigureCodeKeeper.cs
@@ -6,7 +6,7 @@ using System.Threading.Tasks;
 
 namespace Model.Objects
 {
-  class FigureCodeKeeper
+  public class FigureCodeKeeper
   {
     private static readonly string LONG_L_FIGURE = "100100111";
     private static readonly string LONG_I_FIGURE = "100100100";
diff --git a/Model/Objects/FiguresShapes.cs b/Model/Objects/FiguresShapes.cs
index a939bd2..d075dd0 100644
--- a/Model/Objects/FiguresShapes.cs
+++ b/Model/Objects/FiguresShapes.cs
@@ -6,16 +6,19 @@ using System.Threading.Tasks;
 
 namespace Model.Objects
 {
-  class FiguresShapes
+  public class FiguresShapes
   {
-    private readonly Figure[] _figures;
+    public Figure[] Figures
+    {
+      get;
+    }
 
     public FiguresShapes(string[] parFiguresCodes)
     {
-      _figures = new Figure[parFiguresCodes.Length];
-      for (int i = 0; i < _figures.Length; i++)
+      Figures = new Figure[parFiguresCodes.Length];
+      for (int i = 0; i < Figures.Length; i++)
       {
-        _figures[i] = new Figure(parFiguresCodes[i]);
+        Figures[i] = new Figure(parFiguresCodes[i]);
       }
     }
   }
diff --git a/Model/Objects/Pointer.cs b/Model/Objects/Pointer.cs
new file mode 100644
index 0000000..5da0209
--- /dev/null
+++ b/Model/Objects/Pointer.cs
@@ -0,0 +1,14 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model.Objects
+{
+  class Pointer
+  {
+    public Coordinates _coordinates { get; set; }
+
+  }
+}

commit 3997f9920495fbafe3d9e175e5ec4f0f63a8b238
Author: kolay <kolaygreha@mail.ru>
Date:   Thu Dec 12 15:00:58 2019 +0300

    Ev

diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index 005cfee..b120f90 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -11,14 +11,16 @@ namespace Controller
   public class ControllerGamePlay
   {
     private ModelGamePlay _modelGamePlay;
+    private View;
     public event dMoveRight OnClickButtonRight;
     public event dMoveLeft OnClickButtonLeft;
     public event dMoveUp OnClickButtonUp;
     public event dMoveDown OnClickButtonDown;
 
-    public ControllerGamePlay(ModelGamePlay parModel)
+    public ControllerGamePlay()
     {
-      _modelGamePlay = parModel;
+      _modelGamePlay = new ModelGamePlay();
+      
     }
 
 
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 931eb37..f804fb5 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -35,5 +35,38 @@ namespace Model
       _figuresShapes = new FiguresShapes(FigureCodeKeeper.FiguresCodes);
     }
 
+    public void MoveFigureUp()
+    {
+      if (_pointerCoordinates.Y > 0)
+      {
+        _pointerCoordinates.Y -= 1;
+
+      }
+    }
+    public void MoveFigureUp()
+    {
+      if (_pointerCoordinates.Y > 0)
+      {
+        _pointerCoordinates.Y -= 1;
+
+      }
+    }
+    public void MoveFigureUp()
+    {
+      if (_pointerCoordinates.Y > 0)
+      {
+        _pointerCoordinates.Y -= 1;
+
+      }
+    }
+    public void MoveFigureUp()
+    {
+      if (_pointerCoordinates.Y > 0)
+      {
+        _pointerCoordinates.Y -= 1;
+
+      }
+    }
+
   }
 }
diff --git a/View/ViewGamePlay.cs b/View/ViewGamePlay.cs
index 71961b2..8d33435 100644
--- a/View/ViewGamePlay.cs
+++ b/View/ViewGamePlay.cs
@@ -8,5 +8,6 @@ namespace View
 {
   public abstract class ViewGamePlay
   {
+
   }
 }

commit 5d6f5b7915be384c87d4b1f035628d1b7e642880
Author: kolay <kolaygreha@mail.ru>
Date:   Thu Dec 12 13:51:55 2019 +0300

    InitFigures

diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index bbe239f..931eb37 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using Model.Objects;
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -12,6 +13,9 @@ namespace Model
     private const int COUNT_COLUMN = 10;
 
     private Field _gameField;
+    private FiguresShapes _figuresShapes;
+    public Coordinates _pointerCoordinates { get; set; }
+
 
     public Field GameField
     {
@@ -28,6 +32,7 @@ namespace Model
     public ModelGamePlay()
     {
       _gameField = new Field(COUNT_ROW, COUNT_COLUMN);
+      _figuresShapes = new FiguresShapes(FigureCodeKeeper.FiguresCodes);
     }
 
   }
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index 2cd7057..f1c858b 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -8,7 +8,34 @@ namespace Model
 {
   public class Figure
   {
+    private const int FIGURE_SIZE = 3;
     private Cell[][] _figureShape;
+    private int _widthFigure;
+    private int _heightFigure;
+
+    public int HeightFigure
+    {
+      get
+      {
+        return _heightFigure;
+      }
+      set
+      {
+        _heightFigure = value;
+      }
+    }
+
+    public int WidthFigure
+    {
+      get
+      {
+        return _widthFigure;
+      }
+      set
+      {
+        _widthFigure = value;
+      }
+    }
 
     public int FigureShape
     {
@@ -21,13 +48,19 @@ namespace Model
         FigureShape = value;
       }
     }
+
     public Figure(string parfigureCode)
     {
       for (int i = 0; i < parfigureCode.Length; i++)
       {
-        for (int j = 0; j < 3; j++)
+        for (int j = 0; j < FIGURE_SIZE; j++)
         {
-          _figureShape[i][j].IsFull = parfigureCode[3 * i + j] == '1';
+          _figureShape[i][j].IsFull = (parfigureCode[FIGURE_SIZE * i + j] == '1');
+          if (parfigureCode[FIGURE_SIZE * i + j] == '1')
+          {
+            _widthFigure = j + 1;
+            _heightFigure = i + 1;
+          }
         }
       }
     }
diff --git a/Model/Objects/FigureCodeKeeper.cs b/Model/Objects/FigureCodeKeeper.cs
index 6fdf699..f7f83bf 100644
--- a/Model/Objects/FigureCodeKeeper.cs
+++ b/Model/Objects/FigureCodeKeeper.cs
@@ -14,8 +14,15 @@ namespace Model.Objects
     private static readonly string SHORT_L_FIGURE = "100100111";
     private static readonly string SHORT_I_FIGURE = "100100000";
     private static readonly string SHORT_T_FIGURE = "111010000";
-    private static readonly string[] Figures = new String[] { LONG_L_FIGURE, LONG_I_FIGURE, LONG_T_FIGURE, SHORT_L_FIGURE, SHORT_I_FIGURE, SHORT_T_FIGURE};
-    
-    public static void ConvertFigureCodeToMatrix
+    private static readonly string[] _figuresCodes = new String[] { LONG_L_FIGURE, LONG_I_FIGURE, LONG_T_FIGURE, SHORT_L_FIGURE, SHORT_I_FIGURE, SHORT_T_FIGURE };
+
+    public static string[] FiguresCodes
+    {
+      get
+      {
+        return _figuresCodes;
+      }
+    }
+
   }
 }
diff --git a/Model/Objects/FiguresShapes.cs b/Model/Objects/FiguresShapes.cs
index 44e3740..a939bd2 100644
--- a/Model/Objects/FiguresShapes.cs
+++ b/Model/Objects/FiguresShapes.cs
@@ -15,9 +15,8 @@ namespace Model.Objects
       _figures = new Figure[parFiguresCodes.Length];
       for (int i = 0; i < _figures.Length; i++)
       {
-
+        _figures[i] = new Figure(parFiguresCodes[i]);
       }
     }
-
   }
 }
diff --git "a/Model/Objects/\320\241oordinates.cs" "b/Model/Objects/\320\241oordinates.cs"
index 26d5284..612b6c4 100644
--- "a/Model/Objects/\320\241oordinates.cs"
+++ "b/Model/Objects/\320\241oordinates.cs"
@@ -6,7 +6,7 @@ using System.Threading.Tasks;
 
 namespace Model
 {
-  public class Сoordinates
+  public class Coordinates
   {
     private int _x;
     private int _y;
@@ -36,7 +36,7 @@ namespace Model
       }
     }
 
-    public Сoordinates(int x, int y)
+    public Coordinates(int x, int y)
     {
       _x = x;
       _y = y;

commit b288445543ff581760153a1e485a39906f78fc9a
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 11 16:09:08 2019 +0300

    Convert

diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index 6e034ed..2cd7057 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -27,18 +27,9 @@ namespace Model
       {
         for (int j = 0; j < 3; j++)
         {
-          _figureShape[i][j] = parfigureCode[3*i + j]
+          _figureShape[i][j].IsFull = parfigureCode[3 * i + j] == '1';
         }
       }
-      _figureShape = parCells;
-    }
-
-    public Figure FillFigure(string parfigureCode)
-    {
-      for (int i = 0; i < str; i++)
-      {
-
-      }
     }
   }
 }
diff --git a/Model/Objects/FiguresShapes.cs b/Model/Objects/FiguresShapes.cs
index 2d24261..44e3740 100644
--- a/Model/Objects/FiguresShapes.cs
+++ b/Model/Objects/FiguresShapes.cs
@@ -10,19 +10,12 @@ namespace Model.Objects
   {
     private readonly Figure[] _figures;
 
-    public void FiguresShapes(string[] parFiguresCodes)
+    public FiguresShapes(string[] parFiguresCodes)
     {
       _figures = new Figure[parFiguresCodes.Length];
       for (int i = 0; i < _figures.Length; i++)
       {
-        for (int j = 0; j < _figures[i].Length; j++)
-        {
-          for (int k = 0; k < _figures; k++)
-          {
 
-          }
-          _figures[i].FigureShape[i][j]
-        }
       }
     }
 

commit de8b25c00d111391b2b006fac6fadf0722337159
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 11 14:57:15 2019 +0300

    Converting

diff --git a/Model/Model.csproj b/Model/Model.csproj
index a013d46..887f844 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -48,7 +48,8 @@
     <Compile Include="ModelGamePlay.cs" />
     <Compile Include="ModelMenu.cs" />
     <Compile Include="ModelRecordsScreen.cs" />
-    <Compile Include="Objects\FigureKeeper.cs" />
+    <Compile Include="Objects\FigureCodeKeeper.cs" />
+    <Compile Include="Objects\FiguresShapes.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Objects\Сoordinates.cs" />
   </ItemGroup>
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
index ee2b5f9..6e034ed 100644
--- a/Model/Objects/Figure.cs
+++ b/Model/Objects/Figure.cs
@@ -21,10 +21,25 @@ namespace Model
         FigureShape = value;
       }
     }
-    public Figure(Cell[][] parCells)
+    public Figure(string parfigureCode)
     {
+      for (int i = 0; i < parfigureCode.Length; i++)
+      {
+        for (int j = 0; j < 3; j++)
+        {
+          _figureShape[i][j] = parfigureCode[3*i + j]
+        }
+      }
       _figureShape = parCells;
     }
+
+    public Figure FillFigure(string parfigureCode)
+    {
+      for (int i = 0; i < str; i++)
+      {
+
+      }
+    }
   }
 }
 
diff --git a/Model/Objects/FigureCodeKeeper.cs b/Model/Objects/FigureCodeKeeper.cs
new file mode 100644
index 0000000..6fdf699
--- /dev/null
+++ b/Model/Objects/FigureCodeKeeper.cs
@@ -0,0 +1,21 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model.Objects
+{
+  class FigureCodeKeeper
+  {
+    private static readonly string LONG_L_FIGURE = "100100111";
+    private static readonly string LONG_I_FIGURE = "100100100";
+    private static readonly string LONG_T_FIGURE = "111010010";
+    private static readonly string SHORT_L_FIGURE = "100100111";
+    private static readonly string SHORT_I_FIGURE = "100100000";
+    private static readonly string SHORT_T_FIGURE = "111010000";
+    private static readonly string[] Figures = new String[] { LONG_L_FIGURE, LONG_I_FIGURE, LONG_T_FIGURE, SHORT_L_FIGURE, SHORT_I_FIGURE, SHORT_T_FIGURE};
+    
+    public static void ConvertFigureCodeToMatrix
+  }
+}
diff --git a/Model/Objects/FigureKeeper.cs b/Model/Objects/FigureKeeper.cs
deleted file mode 100644
index 6f131c3..0000000
--- a/Model/Objects/FigureKeeper.cs
+++ /dev/null
@@ -1,21 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Model.Objects
-{
-  class FigureKeeper
-  {
-    private readonly string LONG_L_FIGURE = "100100111";
-    private static const string LONG_I_FIGURE = "100100100";
-    private static const string LONG_T_FIGURE = "111010010";
-    private static const string SHORT_L_FIGURE = "100100111";
-    private static const string SHORT_I_FIGURE = "100100000";
-    private static const string SHORT_T_FIGURE = "111010000";
-    private static const string[] Figures = new String[] { LONG_L_FIGURE, LONG_I_FIGURE, LONG_T_FIGURE};
-    
-
-  }
-}
diff --git a/Model/Objects/FiguresShapes.cs b/Model/Objects/FiguresShapes.cs
new file mode 100644
index 0000000..2d24261
--- /dev/null
+++ b/Model/Objects/FiguresShapes.cs
@@ -0,0 +1,30 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model.Objects
+{
+  class FiguresShapes
+  {
+    private readonly Figure[] _figures;
+
+    public void FiguresShapes(string[] parFiguresCodes)
+    {
+      _figures = new Figure[parFiguresCodes.Length];
+      for (int i = 0; i < _figures.Length; i++)
+      {
+        for (int j = 0; j < _figures[i].Length; j++)
+        {
+          for (int k = 0; k < _figures; k++)
+          {
+
+          }
+          _figures[i].FigureShape[i][j]
+        }
+      }
+    }
+
+  }
+}

commit 8f7f1152cf7d1dadf2f3353278a37137ef5d888e
Author: kolay <kolaygreha@mail.ru>
Date:   Mon Dec 9 16:02:21 2019 +0300

    FigureKeeper

diff --git a/Model/ClassDiagram1.cd b/Model/ClassDiagram1.cd
index 0a7b203..20d4f6a 100644
--- a/Model/ClassDiagram1.cd
+++ b/Model/ClassDiagram1.cd
@@ -1,44 +1,37 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
 <ClassDiagram MajorVersion="1" MinorVersion="1">
   <Class Name="Model.Сoordinates">
-    <Position X="6.25" Y="1" Width="1.5" />
+    <Position X="3.25" Y="3" Width="1.5" />
     <TypeIdentifier>
       <HashCode>AAAAAAAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAA=</HashCode>
       <FileName>Objects\Сoordinates.cs</FileName>
     </TypeIdentifier>
   </Class>
   <Class Name="Model.Cell">
-    <Position X="2.5" Y="1" Width="1.5" />
+    <Position X="1" Y="0.5" Width="1.5" />
     <TypeIdentifier>
-      <HashCode>AAAAAAAAAAAAAAAAAACgAAAAAAAAAAAIAAAAAAAACAA=</HashCode>
+      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAACAA=</HashCode>
       <FileName>Objects\Cell.cs</FileName>
     </TypeIdentifier>
   </Class>
   <Class Name="Model.Field">
-    <Position X="4.25" Y="1" Width="1.5" />
+    <Position X="3.25" Y="0.5" Width="1.5" />
     <TypeIdentifier>
       <HashCode>AAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAQAAAA=</HashCode>
       <FileName>Objects\Field.cs</FileName>
     </TypeIdentifier>
   </Class>
   <Class Name="Model.Figure">
-    <Position X="6.25" Y="3.75" Width="1.5" />
+    <Position X="5.5" Y="0.5" Width="1.5" />
     <TypeIdentifier>
       <HashCode>AAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAA=</HashCode>
       <FileName>Objects\Figure.cs</FileName>
     </TypeIdentifier>
   </Class>
-  <Class Name="Model.SelectedItem">
-    <Position X="4.25" Y="3.75" Width="1.5" />
-    <TypeIdentifier>
-      <HashCode>AAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
-      <FileName>Objects\SelectedItem.cs</FileName>
-    </TypeIdentifier>
-  </Class>
   <Class Name="Model.ModelGamePlay">
-    <Position X="2.5" Y="3.75" Width="1.5" />
+    <Position X="1" Y="3" Width="1.75" />
     <TypeIdentifier>
-      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAEAAAIABEBAABAAAAA=</HashCode>
+      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAEAAAIAAABAABAAAAA=</HashCode>
       <FileName>ModelGamePlay.cs</FileName>
     </TypeIdentifier>
   </Class>
diff --git a/Model/Model.csproj b/Model/Model.csproj
index db9b9cc..a013d46 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -48,8 +48,8 @@
     <Compile Include="ModelGamePlay.cs" />
     <Compile Include="ModelMenu.cs" />
     <Compile Include="ModelRecordsScreen.cs" />
+    <Compile Include="Objects\FigureKeeper.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
-    <Compile Include="Objects\SelectedItem.cs" />
     <Compile Include="Objects\Сoordinates.cs" />
   </ItemGroup>
   <ItemGroup>
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index ec79e91..bbe239f 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -10,8 +10,6 @@ namespace Model
   {
     private const int COUNT_ROW = 10;
     private const int COUNT_COLUMN = 10;
-    private const int SHAPE_WIDTH = 3;
-    private const int SHAPE_HEIGHT = 3;
 
     private Field _gameField;
 
diff --git a/Model/Objects/FigureKeeper.cs b/Model/Objects/FigureKeeper.cs
new file mode 100644
index 0000000..6f131c3
--- /dev/null
+++ b/Model/Objects/FigureKeeper.cs
@@ -0,0 +1,21 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model.Objects
+{
+  class FigureKeeper
+  {
+    private readonly string LONG_L_FIGURE = "100100111";
+    private static const string LONG_I_FIGURE = "100100100";
+    private static const string LONG_T_FIGURE = "111010010";
+    private static const string SHORT_L_FIGURE = "100100111";
+    private static const string SHORT_I_FIGURE = "100100000";
+    private static const string SHORT_T_FIGURE = "111010000";
+    private static const string[] Figures = new String[] { LONG_L_FIGURE, LONG_I_FIGURE, LONG_T_FIGURE};
+    
+
+  }
+}
diff --git a/Model/Objects/SelectedItem.cs b/Model/Objects/SelectedItem.cs
deleted file mode 100644
index d8bac80..0000000
--- a/Model/Objects/SelectedItem.cs
+++ /dev/null
@@ -1,18 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Model
-{
-  public class SelectedItem
-  {
-    private Figure _figure;
-
-    public SelectedItem(Figure parFigure)
-    {
-      _figure = parFigure;
-    }
-  }
-}

commit 592e7c23d6195b300672b8c8f3aa5b65640268a1
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 8 20:18:15 2019 +0300

    CommitCons

diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index 8607549..005cfee 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -22,52 +22,5 @@ namespace Controller
     }
 
 
-  }
-}
-
-class Handler_I
-{
-  public void Message()
-  {
-    Console.WriteLine("Пора действовать, ведь уже 71!");
-  }
-}
-
-class Handler_II
-{
-  public void Message()
-  {
-    Console.WriteLine("Точно, уже 71!");
-  }
-}
-
-class ClassCounter  //Это класс - в котором производится счет.
-{
-  public delegate void MethodContainer();
-  public event MethodContainer onCount;
-
-  public void Count()
-  {
-    for (int i = 0; i < 100; i++)
-    {
-      if (i == 71)
-      {
-        onCount();
-      }
-    }
-  }
-}
-
-class Program
-{
-  static void Main(string[] args)
-  {
-    ClassCounter Counter = new ClassCounter();
-    Handler_I Handler1 = new Handler_I();
-    Handler_II Handler2 = new Handler_II();
-
-    //Подписались на событие
-    Counter.onCount += Handler1.Message;
-    Counter.onCount += Handler2.Message;
   }
 }
\ No newline at end of file
diff --git a/Model/ClassDiagram1.cd b/Model/ClassDiagram1.cd
new file mode 100644
index 0000000..0a7b203
--- /dev/null
+++ b/Model/ClassDiagram1.cd
@@ -0,0 +1,46 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<ClassDiagram MajorVersion="1" MinorVersion="1">
+  <Class Name="Model.Сoordinates">
+    <Position X="6.25" Y="1" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAA=</HashCode>
+      <FileName>Objects\Сoordinates.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Class Name="Model.Cell">
+    <Position X="2.5" Y="1" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAAAAAAAAAAAACgAAAAAAAAAAAIAAAAAAAACAA=</HashCode>
+      <FileName>Objects\Cell.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Class Name="Model.Field">
+    <Position X="4.25" Y="1" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAQAAAA=</HashCode>
+      <FileName>Objects\Field.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Class Name="Model.Figure">
+    <Position X="6.25" Y="3.75" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAA=</HashCode>
+      <FileName>Objects\Figure.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Class Name="Model.SelectedItem">
+    <Position X="4.25" Y="3.75" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
+      <FileName>Objects\SelectedItem.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Class Name="Model.ModelGamePlay">
+    <Position X="2.5" Y="3.75" Width="1.5" />
+    <TypeIdentifier>
+      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAEAAAIABEBAABAAAAA=</HashCode>
+      <FileName>ModelGamePlay.cs</FileName>
+    </TypeIdentifier>
+  </Class>
+  <Font Name="Segoe UI" Size="9" />
+</ClassDiagram>
\ No newline at end of file
diff --git a/Model/Model.csproj b/Model/Model.csproj
index e30da1b..db9b9cc 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -52,5 +52,8 @@
     <Compile Include="Objects\SelectedItem.cs" />
     <Compile Include="Objects\Сoordinates.cs" />
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ClassDiagram1.cd" />
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index e816b33..ec79e91 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -27,6 +27,10 @@ namespace Model
       }
     }
 
-
+    public ModelGamePlay()
+    {
+      _gameField = new Field(COUNT_ROW, COUNT_COLUMN);
     }
+
   }
+}
diff --git a/Model/Objects/Cell.cs b/Model/Objects/Cell.cs
index 0a0ff58..1963100 100644
--- a/Model/Objects/Cell.cs
+++ b/Model/Objects/Cell.cs
@@ -9,19 +9,19 @@ namespace Model
   public class Cell
   {
     private bool _isFull;
-    private Сoordinates coordinates;
+    //private Сoordinates coordinates;
 
-    public Сoordinates Сoordinates
-    {
-      get
-      {
-        return coordinates;
-      }
-      set
-      {
-        coordinates = value;
-      }
-    }
+    //public Сoordinates Сoordinates
+    //{
+    //  get
+    //  {
+    //    return coordinates;
+    //  }
+    //  set
+    //  {
+    //    coordinates = value;
+    //  }
+    //}
 
     public bool IsFull
     {
diff --git a/Model/Objects/Field.cs b/Model/Objects/Field.cs
index 9680df2..7ddbfc1 100644
--- a/Model/Objects/Field.cs
+++ b/Model/Objects/Field.cs
@@ -21,6 +21,17 @@ namespace Model
         _playingField = value;
       }
     }
-
+    public Field(int parRowCount, int parColomnCount)
+    {
+      _playingField = new Cell[parRowCount][];
+      for (int i = 0; i < _playingField.Length; i++)
+      {
+        _playingField[i] = new Cell[parColomnCount];
+        for (int j = 0; j < _playingField[i].Length; j++)
+        {
+          _playingField[i][j] = new Cell(false);
+        }
+      }
+    }
   }
-}
+}
\ No newline at end of file

commit 733b0fd360f690196ff42dee3c24a6bfc7718a29
Author: kolay <kolaygreha@mail.ru>
Date:   Sat Dec 7 22:41:50 2019 +0300

    CommitEvents

diff --git a/Controller/Controller.csproj b/Controller/Controller.csproj
index 53f2e62..0772303 100644
--- a/Controller/Controller.csproj
+++ b/Controller/Controller.csproj
@@ -45,6 +45,10 @@
     <Compile Include="ControllerGamePlay.cs" />
     <Compile Include="ControllerMenu.cs" />
     <Compile Include="ControllerRecordsScreen.cs" />
+    <Compile Include="Delegates\DelegateMoveDown.cs" />
+    <Compile Include="Delegates\DelegateMoveLeft.cs" />
+    <Compile Include="Delegates\DelegateMoveRight.cs" />
+    <Compile Include="Delegates\DelegateMoveUp.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <ItemGroup>
diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index f76159a..8607549 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -1,4 +1,5 @@
-﻿using Model;
+﻿using Controller.Delegates;
+using Model;
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -10,7 +11,63 @@ namespace Controller
   public class ControllerGamePlay
   {
     private ModelGamePlay _modelGamePlay;
+    public event dMoveRight OnClickButtonRight;
+    public event dMoveLeft OnClickButtonLeft;
+    public event dMoveUp OnClickButtonUp;
+    public event dMoveDown OnClickButtonDown;
 
+    public ControllerGamePlay(ModelGamePlay parModel)
+    {
+      _modelGamePlay = parModel;
+    }
 
+
+  }
+}
+
+class Handler_I
+{
+  public void Message()
+  {
+    Console.WriteLine("Пора действовать, ведь уже 71!");
+  }
+}
+
+class Handler_II
+{
+  public void Message()
+  {
+    Console.WriteLine("Точно, уже 71!");
   }
 }
+
+class ClassCounter  //Это класс - в котором производится счет.
+{
+  public delegate void MethodContainer();
+  public event MethodContainer onCount;
+
+  public void Count()
+  {
+    for (int i = 0; i < 100; i++)
+    {
+      if (i == 71)
+      {
+        onCount();
+      }
+    }
+  }
+}
+
+class Program
+{
+  static void Main(string[] args)
+  {
+    ClassCounter Counter = new ClassCounter();
+    Handler_I Handler1 = new Handler_I();
+    Handler_II Handler2 = new Handler_II();
+
+    //Подписались на событие
+    Counter.onCount += Handler1.Message;
+    Counter.onCount += Handler2.Message;
+  }
+}
\ No newline at end of file
diff --git a/Controller/Delegates/DelegateMoveDown.cs b/Controller/Delegates/DelegateMoveDown.cs
new file mode 100644
index 0000000..7b32d89
--- /dev/null
+++ b/Controller/Delegates/DelegateMoveDown.cs
@@ -0,0 +1,10 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller.Delegates
+{
+  public delegate void dMoveDown();
+}
diff --git a/Controller/Delegates/DelegateMoveLeft.cs b/Controller/Delegates/DelegateMoveLeft.cs
new file mode 100644
index 0000000..3bbfa73
--- /dev/null
+++ b/Controller/Delegates/DelegateMoveLeft.cs
@@ -0,0 +1,10 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller.Delegates
+{
+  public delegate void dMoveLeft();
+}
diff --git a/Controller/Delegates/DelegateMoveRight.cs b/Controller/Delegates/DelegateMoveRight.cs
new file mode 100644
index 0000000..c5f8d59
--- /dev/null
+++ b/Controller/Delegates/DelegateMoveRight.cs
@@ -0,0 +1,10 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller
+{
+  public delegate void dMoveRight();
+}
diff --git a/Controller/Delegates/DelegateMoveUp.cs b/Controller/Delegates/DelegateMoveUp.cs
new file mode 100644
index 0000000..e507704
--- /dev/null
+++ b/Controller/Delegates/DelegateMoveUp.cs
@@ -0,0 +1,10 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller.Delegates
+{
+  public delegate void dMoveUp();
+}
diff --git a/Model/Model.csproj b/Model/Model.csproj
index a14ccf5..e30da1b 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -41,12 +41,16 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
-    <Compile Include="Cell.cs" />
+    <Compile Include="Objects\Cell.cs" />
+    <Compile Include="Objects\Field.cs" />
+    <Compile Include="Objects\Figure.cs" />
     <Compile Include="ModelGameOverScreen.cs" />
     <Compile Include="ModelGamePlay.cs" />
     <Compile Include="ModelMenu.cs" />
     <Compile Include="ModelRecordsScreen.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="Objects\SelectedItem.cs" />
+    <Compile Include="Objects\Сoordinates.cs" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 3773b8d..e816b33 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -10,7 +10,23 @@ namespace Model
   {
     private const int COUNT_ROW = 10;
     private const int COUNT_COLUMN = 10;
+    private const int SHAPE_WIDTH = 3;
+    private const int SHAPE_HEIGHT = 3;
 
+    private Field _gameField;
 
+    public Field GameField
+    {
+      get
+      {
+        return _gameField;
+      }
+      set
+      {
+        _gameField = value;
+      }
+    }
+
+
+    }
   }
-}
diff --git a/Model/Cell.cs b/Model/Objects/Cell.cs
similarity index 63%
rename from Model/Cell.cs
rename to Model/Objects/Cell.cs
index 67f0f75..0a0ff58 100644
--- a/Model/Cell.cs
+++ b/Model/Objects/Cell.cs
@@ -6,9 +6,22 @@ using System.Threading.Tasks;
 
 namespace Model
 {
-  class Cell
+  public class Cell
   {
     private bool _isFull;
+    private Сoordinates coordinates;
+
+    public Сoordinates Сoordinates
+    {
+      get
+      {
+        return coordinates;
+      }
+      set
+      {
+        coordinates = value;
+      }
+    }
 
     public bool IsFull
     {
@@ -22,7 +35,6 @@ namespace Model
       }
     }
 
-
     public Cell(bool isFull)
     {
       _isFull = isFull;
diff --git a/Model/Objects/Field.cs b/Model/Objects/Field.cs
new file mode 100644
index 0000000..9680df2
--- /dev/null
+++ b/Model/Objects/Field.cs
@@ -0,0 +1,26 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class Field
+  {
+    private Cell[][] _playingField;
+
+    public Cell[][] PlayingField
+    {
+      get
+      {
+        return _playingField;
+      }
+      set
+      {
+        _playingField = value;
+      }
+    }
+
+  }
+}
diff --git a/Model/Objects/Figure.cs b/Model/Objects/Figure.cs
new file mode 100644
index 0000000..ee2b5f9
--- /dev/null
+++ b/Model/Objects/Figure.cs
@@ -0,0 +1,30 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class Figure
+  {
+    private Cell[][] _figureShape;
+
+    public int FigureShape
+    {
+      get
+      {
+        return FigureShape;
+      }
+      set
+      {
+        FigureShape = value;
+      }
+    }
+    public Figure(Cell[][] parCells)
+    {
+      _figureShape = parCells;
+    }
+  }
+}
+
diff --git a/Model/Objects/SelectedItem.cs b/Model/Objects/SelectedItem.cs
new file mode 100644
index 0000000..d8bac80
--- /dev/null
+++ b/Model/Objects/SelectedItem.cs
@@ -0,0 +1,18 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class SelectedItem
+  {
+    private Figure _figure;
+
+    public SelectedItem(Figure parFigure)
+    {
+      _figure = parFigure;
+    }
+  }
+}
diff --git "a/Model/Objects/\320\241oordinates.cs" "b/Model/Objects/\320\241oordinates.cs"
new file mode 100644
index 0000000..26d5284
--- /dev/null
+++ "b/Model/Objects/\320\241oordinates.cs"
@@ -0,0 +1,45 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class Сoordinates
+  {
+    private int _x;
+    private int _y;
+
+
+    public int X
+    {
+      get
+      {
+        return _x;
+      }
+      set
+      {
+        _x = value;
+      }
+    }
+
+    public int Y
+    {
+      get
+      {
+        return _y;
+      }
+      set
+      {
+        _y = value;
+      }
+    }
+
+    public Сoordinates(int x, int y)
+    {
+      _x = x;
+      _y = y;
+    }
+  }
+}

commit d5c4ea08f07a3ac6c0b241433a43c7bcadd86790
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 4 12:53:01 2019 +0300

    Commit4

diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
index aeab277..f76159a 100644
--- a/Controller/ControllerGamePlay.cs
+++ b/Controller/ControllerGamePlay.cs
@@ -1,4 +1,5 @@
-﻿using System;
+﻿using Model;
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -8,5 +9,8 @@ namespace Controller
 {
   public class ControllerGamePlay
   {
+    private ModelGamePlay _modelGamePlay;
+
+
   }
 }
diff --git a/Model/Cell.cs b/Model/Cell.cs
new file mode 100644
index 0000000..67f0f75
--- /dev/null
+++ b/Model/Cell.cs
@@ -0,0 +1,31 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  class Cell
+  {
+    private bool _isFull;
+
+    public bool IsFull
+    {
+      get
+      {
+        return _isFull;
+      }
+      set
+      {
+        _isFull = value;
+      }
+    }
+
+
+    public Cell(bool isFull)
+    {
+      _isFull = isFull;
+    }
+  }
+}
diff --git a/Model/Model.csproj b/Model/Model.csproj
index 575253e..a14ccf5 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -41,6 +41,7 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Cell.cs" />
     <Compile Include="ModelGameOverScreen.cs" />
     <Compile Include="ModelGamePlay.cs" />
     <Compile Include="ModelMenu.cs" />
diff --git a/Model/ModelGamePlay.cs b/Model/ModelGamePlay.cs
index 3fdbca6..3773b8d 100644
--- a/Model/ModelGamePlay.cs
+++ b/Model/ModelGamePlay.cs
@@ -8,5 +8,9 @@ namespace Model
 {
   public class ModelGamePlay
   {
+    private const int COUNT_ROW = 10;
+    private const int COUNT_COLUMN = 10;
+
+
   }
 }
diff --git a/View/ViewGameOverScreen.cs b/View/ViewGameOverScreen.cs
index 14888b4..8ad1437 100644
--- a/View/ViewGameOverScreen.cs
+++ b/View/ViewGameOverScreen.cs
@@ -6,7 +6,8 @@ using System.Threading.Tasks;
 
 namespace View
 {
-  public class ViewGameOverScreen
+  public abstract class ViewGameOverScreen
   {
   }
 }
+
diff --git a/View/ViewGamePlay.cs b/View/ViewGamePlay.cs
index 8c6b1d7..71961b2 100644
--- a/View/ViewGamePlay.cs
+++ b/View/ViewGamePlay.cs
@@ -6,7 +6,7 @@ using System.Threading.Tasks;
 
 namespace View
 {
-  public class ViewGamePlay
+  public abstract class ViewGamePlay
   {
   }
 }
diff --git a/View/ViewMenu.cs b/View/ViewMenu.cs
index 12a14c5..abec75f 100644
--- a/View/ViewMenu.cs
+++ b/View/ViewMenu.cs
@@ -6,8 +6,8 @@ using System.Threading.Tasks;
 
 namespace View
 {
-    public abstract class ViewMenu
-    {
+  public abstract class ViewMenu
+  {
 
-    }
+  }
 }
diff --git a/View/ViewRecordsScreen.cs b/View/ViewRecordsScreen.cs
index ed0ba26..5958255 100644
--- a/View/ViewRecordsScreen.cs
+++ b/View/ViewRecordsScreen.cs
@@ -6,7 +6,7 @@ using System.Threading.Tasks;
 
 namespace View
 {
-  public class ViewRecordsScreen
+  public abstract class ViewRecordsScreen
   {
   }
 }

commit 0b07094e70c915cb84d4fe8125c8f81d5172fb39
Author: kolay <kolaygreha@mail.ru>
Date:   Wed Dec 4 06:32:32 2019 +0300

    CommitStructure

diff --git a/BlockPuzzle.sln b/BlockPuzzle.sln
index c4ad149..5a0c5bf 100644
--- a/BlockPuzzle.sln
+++ b/BlockPuzzle.sln
@@ -3,7 +3,11 @@ Microsoft Visual Studio Solution File, Format Version 12.00
 # Visual Studio 15
 VisualStudioVersion = 15.0.28307.438
 MinimumVisualStudioVersion = 10.0.40219.1
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Model", "Model\Model.csproj", "{5E161D26-C93A-4201-918F-5E40BBFBDEF9}"
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Controller", "Controller\Controller.csproj", "{67DC37B6-3215-41F2-8A52-76E761E2CA64}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Model", "Model\Model.csproj", "{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "View", "View\View.csproj", "{3731401D-E76A-43EF-B549-74CB37C6B074}"
 EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
@@ -11,10 +15,18 @@ Global
 		Release|Any CPU = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{67DC37B6-3215-41F2-8A52-76E761E2CA64}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{67DC37B6-3215-41F2-8A52-76E761E2CA64}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{67DC37B6-3215-41F2-8A52-76E761E2CA64}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{67DC37B6-3215-41F2-8A52-76E761E2CA64}.Release|Any CPU.Build.0 = Release|Any CPU
+		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}.Release|Any CPU.Build.0 = Release|Any CPU
+		{3731401D-E76A-43EF-B549-74CB37C6B074}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{3731401D-E76A-43EF-B549-74CB37C6B074}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{3731401D-E76A-43EF-B549-74CB37C6B074}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{3731401D-E76A-43EF-B549-74CB37C6B074}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/Controller/Controller.csproj b/Controller/Controller.csproj
new file mode 100644
index 0000000..53f2e62
--- /dev/null
+++ b/Controller/Controller.csproj
@@ -0,0 +1,57 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{67DC37B6-3215-41F2-8A52-76E761E2CA64}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>Controller</RootNamespace>
+    <AssemblyName>Controller</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="ControllerGameOverScreen.cs" />
+    <Compile Include="ControllerGamePlay.cs" />
+    <Compile Include="ControllerMenu.cs" />
+    <Compile Include="ControllerRecordsScreen.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\Model\Model.csproj">
+      <Project>{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}</Project>
+      <Name>Model</Name>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/Controller/ControllerGameOverScreen.cs b/Controller/ControllerGameOverScreen.cs
new file mode 100644
index 0000000..e11e884
--- /dev/null
+++ b/Controller/ControllerGameOverScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller
+{
+  public class ControllerGameOverScreen
+  {
+  }
+}
diff --git a/Controller/ControllerGamePlay.cs b/Controller/ControllerGamePlay.cs
new file mode 100644
index 0000000..aeab277
--- /dev/null
+++ b/Controller/ControllerGamePlay.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller
+{
+  public class ControllerGamePlay
+  {
+  }
+}
diff --git a/Controller/ControllerMenu.cs b/Controller/ControllerMenu.cs
new file mode 100644
index 0000000..9bced88
--- /dev/null
+++ b/Controller/ControllerMenu.cs
@@ -0,0 +1,13 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller
+{
+  public class ControllerMenu
+  {
+
+  }
+}
diff --git a/Controller/ControllerRecordsScreen.cs b/Controller/ControllerRecordsScreen.cs
new file mode 100644
index 0000000..332e387
--- /dev/null
+++ b/Controller/ControllerRecordsScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Controller
+{
+  public class ControllerRecordsScreen
+  {
+  }
+}
diff --git a/Controller/Properties/AssemblyInfo.cs b/Controller/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..a98eaee
--- /dev/null
+++ b/Controller/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("Controller")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("Controller")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("67dc37b6-3215-41f2-8a52-76e761e2ca64")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/Model/Model.csproj b/Model/Model.csproj
index 16b6ac6..575253e 100644
--- a/Model/Model.csproj
+++ b/Model/Model.csproj
@@ -4,7 +4,7 @@
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProjectGuid>{5E161D26-C93A-4201-918F-5E40BBFBDEF9}</ProjectGuid>
+    <ProjectGuid>{58D968E0-98A3-4DE4-A2EE-4F55CD7E0699}</ProjectGuid>
     <OutputType>Library</OutputType>
     <AppDesignerFolder>Properties</AppDesignerFolder>
     <RootNamespace>Model</RootNamespace>
@@ -41,8 +41,10 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
-    <Compile Include="Class1.cs" />
-    <Compile Include="Class2.cs" />
+    <Compile Include="ModelGameOverScreen.cs" />
+    <Compile Include="ModelGamePlay.cs" />
+    <Compile Include="ModelMenu.cs" />
+    <Compile Include="ModelRecordsScreen.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
diff --git a/Model/ModelGameOverScreen.cs b/Model/ModelGameOverScreen.cs
new file mode 100644
index 0000000..c724605
--- /dev/null
+++ b/Model/ModelGameOverScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class ModelGameOverScreen
+  {
+  }
+}
diff --git a/Model/Class2.cs b/Model/ModelGamePlay.cs
similarity index 83%
rename from Model/Class2.cs
rename to Model/ModelGamePlay.cs
index ff151b9..3fdbca6 100644
--- a/Model/Class2.cs
+++ b/Model/ModelGamePlay.cs
@@ -6,8 +6,7 @@ using System.Threading.Tasks;
 
 namespace Model
 {
-  class Class2
+  public class ModelGamePlay
   {
-    //Hello 3
   }
 }
diff --git a/Model/ModelMenu.cs b/Model/ModelMenu.cs
new file mode 100644
index 0000000..4bfafe9
--- /dev/null
+++ b/Model/ModelMenu.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class ModelMenu
+  {
+  }
+}
diff --git a/Model/ModelRecordsScreen.cs b/Model/ModelRecordsScreen.cs
new file mode 100644
index 0000000..3d66cc3
--- /dev/null
+++ b/Model/ModelRecordsScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  public class ModelRecordsScreen
+  {
+  }
+}
diff --git a/Model/Properties/AssemblyInfo.cs b/Model/Properties/AssemblyInfo.cs
index 44c282b..b1f55b6 100644
--- a/Model/Properties/AssemblyInfo.cs
+++ b/Model/Properties/AssemblyInfo.cs
@@ -5,11 +5,11 @@ using System.Runtime.InteropServices;
 // General Information about an assembly is controlled through the following
 // set of attributes. Change these attribute values to modify the information
 // associated with an assembly.
-[assembly: AssemblyTitle("BlockPuzzle")]
+[assembly: AssemblyTitle("Model")]
 [assembly: AssemblyDescription("")]
 [assembly: AssemblyConfiguration("")]
 [assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("BlockPuzzle")]
+[assembly: AssemblyProduct("Model")]
 [assembly: AssemblyCopyright("Copyright ©  2019")]
 [assembly: AssemblyTrademark("")]
 [assembly: AssemblyCulture("")]
@@ -20,7 +20,7 @@ using System.Runtime.InteropServices;
 [assembly: ComVisible(false)]
 
 // The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("5e161d26-c93a-4201-918f-5e40bbfbdef9")]
+[assembly: Guid("58d968e0-98a3-4de4-a2ee-4f55cd7e0699")]
 
 // Version information for an assembly consists of the following four values:
 //
diff --git a/View/Properties/AssemblyInfo.cs b/View/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..0398cb1
--- /dev/null
+++ b/View/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("View")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("View")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("3731401d-e76a-43ef-b549-74cb37c6b074")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/View/View.csproj b/View/View.csproj
new file mode 100644
index 0000000..920e02c
--- /dev/null
+++ b/View/View.csproj
@@ -0,0 +1,51 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{3731401D-E76A-43EF-B549-74CB37C6B074}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>View</RootNamespace>
+    <AssemblyName>View</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="ViewGameOverScreen.cs" />
+    <Compile Include="ViewGamePlay.cs" />
+    <Compile Include="ViewMenu.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="ViewRecordsScreen.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/View/ViewGameOverScreen.cs b/View/ViewGameOverScreen.cs
new file mode 100644
index 0000000..14888b4
--- /dev/null
+++ b/View/ViewGameOverScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace View
+{
+  public class ViewGameOverScreen
+  {
+  }
+}
diff --git a/View/ViewGamePlay.cs b/View/ViewGamePlay.cs
new file mode 100644
index 0000000..8c6b1d7
--- /dev/null
+++ b/View/ViewGamePlay.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace View
+{
+  public class ViewGamePlay
+  {
+  }
+}
diff --git a/Model/Class1.cs b/View/ViewMenu.cs
similarity index 72%
rename from Model/Class1.cs
rename to View/ViewMenu.cs
index f41ede1..12a14c5 100644
--- a/Model/Class1.cs
+++ b/View/ViewMenu.cs
@@ -4,9 +4,10 @@ using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
 
-namespace BlockPuzzle
+namespace View
 {
-    public class Class1
+    public abstract class ViewMenu
     {
+
     }
 }
diff --git a/View/ViewRecordsScreen.cs b/View/ViewRecordsScreen.cs
new file mode 100644
index 0000000..ed0ba26
--- /dev/null
+++ b/View/ViewRecordsScreen.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace View
+{
+  public class ViewRecordsScreen
+  {
+  }
+}

commit 9eb45ea352b0a767d832d81fac69da9e9f8b7a2c
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 1 11:58:33 2019 +0300

    3

diff --git a/Model/Class2.cs b/Model/Class2.cs
index c4277cc..ff151b9 100644
--- a/Model/Class2.cs
+++ b/Model/Class2.cs
@@ -8,6 +8,6 @@ namespace Model
 {
   class Class2
   {
-    //Hello
+    //Hello 3
   }
 }

commit 3cbd2f1798f4650363d07de9da2fd99aa6b1131d
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 1 11:55:30 2019 +0300

    Commit2

diff --git a/Model/Class2.cs b/Model/Class2.cs
index e666e7c..c4277cc 100644
--- a/Model/Class2.cs
+++ b/Model/Class2.cs
@@ -8,5 +8,6 @@ namespace Model
 {
   class Class2
   {
+    //Hello
   }
 }

commit 2b0a2818bf36634895035905a3abe3d7e765943e
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 1 11:43:09 2019 +0300

    commit1

diff --git a/BlockPuzzle.sln b/BlockPuzzle.sln
index 08e981a..c4ad149 100644
--- a/BlockPuzzle.sln
+++ b/BlockPuzzle.sln
@@ -3,7 +3,7 @@ Microsoft Visual Studio Solution File, Format Version 12.00
 # Visual Studio 15
 VisualStudioVersion = 15.0.28307.438
 MinimumVisualStudioVersion = 10.0.40219.1
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BlockPuzzle", "BlockPuzzle\BlockPuzzle.csproj", "{5E161D26-C93A-4201-918F-5E40BBFBDEF9}"
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Model", "Model\Model.csproj", "{5E161D26-C93A-4201-918F-5E40BBFBDEF9}"
 EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
diff --git a/BlockPuzzle/Class1.cs b/Model/Class1.cs
similarity index 100%
rename from BlockPuzzle/Class1.cs
rename to Model/Class1.cs
diff --git a/Model/Class2.cs b/Model/Class2.cs
new file mode 100644
index 0000000..e666e7c
--- /dev/null
+++ b/Model/Class2.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Model
+{
+  class Class2
+  {
+  }
+}
diff --git a/BlockPuzzle/BlockPuzzle.csproj b/Model/Model.csproj
similarity index 73%
rename from BlockPuzzle/BlockPuzzle.csproj
rename to Model/Model.csproj
index 34bacc8..16b6ac6 100644
--- a/BlockPuzzle/BlockPuzzle.csproj
+++ b/Model/Model.csproj
@@ -1,14 +1,14 @@
-<?xml version="1.0" encoding="utf-8"?>
+﻿<?xml version="1.0" encoding="utf-8"?>
 <Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProjectGuid>5e161d26-c93a-4201-918f-5e40bbfbdef9</ProjectGuid>
+    <ProjectGuid>{5E161D26-C93A-4201-918F-5E40BBFBDEF9}</ProjectGuid>
     <OutputType>Library</OutputType>
     <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>BlockPuzzle</RootNamespace>
-    <AssemblyName>BlockPuzzle</AssemblyName>
+    <RootNamespace>Model</RootNamespace>
+    <AssemblyName>Model</AssemblyName>
     <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
     <FileAlignment>512</FileAlignment>
     <Deterministic>true</Deterministic>
@@ -31,24 +31,19 @@
     <WarningLevel>4</WarningLevel>
   </PropertyGroup>
   <ItemGroup>
-    <Reference Include="System"/>
-    
-    <Reference Include="System.Core"/>
-    <Reference Include="System.Xml.Linq"/>
-    <Reference Include="System.Data.DataSetExtensions"/>
-    
-    
-    <Reference Include="Microsoft.CSharp"/>
-    
-    <Reference Include="System.Data"/>
-    
-    <Reference Include="System.Net.Http"/>
-    
-    <Reference Include="System.Xml"/>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
     <Compile Include="Class1.cs" />
+    <Compile Include="Class2.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
- </Project>
+</Project>
\ No newline at end of file
diff --git a/BlockPuzzle/Properties/AssemblyInfo.cs b/Model/Properties/AssemblyInfo.cs
similarity index 100%
rename from BlockPuzzle/Properties/AssemblyInfo.cs
rename to Model/Properties/AssemblyInfo.cs

commit 2fe9cb1408e3b15aab7139c127f85442f9239e47
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 1 11:38:04 2019 +0300

    Add project files.

diff --git a/BlockPuzzle.sln b/BlockPuzzle.sln
new file mode 100644
index 0000000..08e981a
--- /dev/null
+++ b/BlockPuzzle.sln
@@ -0,0 +1,25 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.28307.438
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BlockPuzzle", "BlockPuzzle\BlockPuzzle.csproj", "{5E161D26-C93A-4201-918F-5E40BBFBDEF9}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{5E161D26-C93A-4201-918F-5E40BBFBDEF9}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {46EA8955-6026-4BB8-8372-120145E4C297}
+	EndGlobalSection
+EndGlobal
diff --git a/BlockPuzzle/BlockPuzzle.csproj b/BlockPuzzle/BlockPuzzle.csproj
new file mode 100644
index 0000000..34bacc8
--- /dev/null
+++ b/BlockPuzzle/BlockPuzzle.csproj
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>5e161d26-c93a-4201-918f-5e40bbfbdef9</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>BlockPuzzle</RootNamespace>
+    <AssemblyName>BlockPuzzle</AssemblyName>
+    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+    <Deterministic>true</Deterministic>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System"/>
+    
+    <Reference Include="System.Core"/>
+    <Reference Include="System.Xml.Linq"/>
+    <Reference Include="System.Data.DataSetExtensions"/>
+    
+    
+    <Reference Include="Microsoft.CSharp"/>
+    
+    <Reference Include="System.Data"/>
+    
+    <Reference Include="System.Net.Http"/>
+    
+    <Reference Include="System.Xml"/>
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Class1.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+ </Project>
diff --git a/BlockPuzzle/Class1.cs b/BlockPuzzle/Class1.cs
new file mode 100644
index 0000000..f41ede1
--- /dev/null
+++ b/BlockPuzzle/Class1.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace BlockPuzzle
+{
+    public class Class1
+    {
+    }
+}
diff --git a/BlockPuzzle/Properties/AssemblyInfo.cs b/BlockPuzzle/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..44c282b
--- /dev/null
+++ b/BlockPuzzle/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("BlockPuzzle")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("BlockPuzzle")]
+[assembly: AssemblyCopyright("Copyright ©  2019")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("5e161d26-c93a-4201-918f-5e40bbfbdef9")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]

commit 2dc5c1404ec7d4470bec79e56d7469e436088ee5
Author: kolay <kolaygreha@mail.ru>
Date:   Sun Dec 1 11:38:01 2019 +0300

    Add .gitignore and .gitattributes.

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..1ff0c42
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,63 @@
+###############################################################################
+# Set default behavior to automatically normalize line endings.
+###############################################################################
+* text=auto
+
+###############################################################################
+# Set default behavior for command prompt diff.
+#
+# This is need for earlier builds of msysgit that does not have it on by
+# default for csharp files.
+# Note: This is only used by command line
+###############################################################################
+#*.cs     diff=csharp
+
+###############################################################################
+# Set the merge driver for project and solution files
+#
+# Merging from the command prompt will add diff markers to the files if there
+# are conflicts (Merging from VS is not affected by the settings below, in VS
+# the diff markers are never inserted). Diff markers may cause the following 
+# file extensions to fail to load in VS. An alternative would be to treat
+# these files as binary and thus will always conflict and require user
+# intervention with every merge. To do so, just uncomment the entries below
+###############################################################################
+#*.sln       merge=binary
+#*.csproj    merge=binary
+#*.vbproj    merge=binary
+#*.vcxproj   merge=binary
+#*.vcproj    merge=binary
+#*.dbproj    merge=binary
+#*.fsproj    merge=binary
+#*.lsproj    merge=binary
+#*.wixproj   merge=binary
+#*.modelproj merge=binary
+#*.sqlproj   merge=binary
+#*.wwaproj   merge=binary
+
+###############################################################################
+# behavior for image files
+#
+# image files are treated as binary by default.
+###############################################################################
+#*.jpg   binary
+#*.png   binary
+#*.gif   binary
+
+###############################################################################
+# diff behavior for common document formats
+# 
+# Convert binary document formats to text before diffing them. This feature
+# is only available from the command line. Turn it on by uncommenting the 
+# entries below.
+###############################################################################
+#*.doc   diff=astextplain
+#*.DOC   diff=astextplain
+#*.docx  diff=astextplain
+#*.DOCX  diff=astextplain
+#*.dot   diff=astextplain
+#*.DOT   diff=astextplain
+#*.pdf   diff=astextplain
+#*.PDF   diff=astextplain
+#*.rtf   diff=astextplain
+#*.RTF   diff=astextplain
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3c4efe2
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,261 @@
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+
+# User-specific files
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# User-specific files (MonoDevelop/Xamarin Studio)
+*.userprefs
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+
+# Visual Studio 2015 cache/options directory
+.vs/
+# Uncomment if you have tasks that create the project's static files in wwwroot
+#wwwroot/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUNIT
+*.VisualState.xml
+TestResult.xml
+
+# Build Results of an ATL Project
+[Dd]ebugPS/
+[Rr]eleasePS/
+dlldata.c
+
+# DNX
+project.lock.json
+project.fragment.lock.json
+artifacts/
+
+*_i.c
+*_p.c
+*_i.h
+*.ilk
+*.meta
+*.obj
+*.pch
+*.pdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*.log
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.svclog
+*.scc
+
+# Chutzpah Test files
+_Chutzpah*
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# JustCode is a .NET coding add-in
+.JustCode
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# NCrunch
+_NCrunch_*
+.*crunch*.local.xml
+nCrunchTemp_*
+
+# MightyMoose
+*.mm.*
+AutoTest.Net/
+
+# Web workbench (sass)
+.sass-cache/
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.[Pp]ublish.xml
+*.azurePubxml
+# TODO: Comment the next line if you want to checkin your web deploy settings
+# but database connection strings (with potential passwords) will be unencrypted
+#*.pubxml
+*.publishproj
+
+# Microsoft Azure Web App publish settings. Comment the next line if you want to
+# checkin your Azure Web App publish settings, but sensitive information contained
+# in these scripts will be unencrypted
+PublishScripts/
+
+# NuGet Packages
+*.nupkg
+# The packages folder can be ignored because of Package Restore
+**/packages/*
+# except build/, which is used as an MSBuild target.
+!**/packages/build/
+# Uncomment if necessary however generally it will be regenerated when needed
+#!**/packages/repositories.config
+# NuGet v3's project.json files produces more ignoreable files
+*.nuget.props
+*.nuget.targets
+
+# Microsoft Azure Build Output
+csx/
+*.build.csdef
+
+# Microsoft Azure Emulator
+ecf/
+rcf/
+
+# Windows Store app package directories and files
+AppPackages/
+BundleArtifacts/
+Package.StoreAssociation.xml
+_pkginfo.txt
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!*.[Cc]ache/
+
+# Others
+ClientBin/
+~$*
+*~
+*.dbmdl
+*.dbproj.schemaview
+*.jfm
+*.pfx
+*.publishsettings
+node_modules/
+orleans.codegen.cs
+
+# Since there are multiple workflows, uncomment next line to ignore bower_components
+# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
+#bower_components/
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file
+# to a newer Visual Studio version. Backup files are not needed,
+# because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+
+# SQL Server files
+*.mdf
+*.ldf
+
+# Business Intelligence projects
+*.rdl.data
+*.bim.layout
+*.bim_*.settings
+
+# Microsoft Fakes
+FakesAssemblies/
+
+# GhostDoc plugin setting file
+*.GhostDoc.xml
+
+# Node.js Tools for Visual Studio
+.ntvs_analysis.dat
+
+# Visual Studio 6 build log
+*.plg
+
+# Visual Studio 6 workspace options file
+*.opt
+
+# Visual Studio LightSwitch build output
+**/*.HTMLClient/GeneratedArtifacts
+**/*.DesktopClient/GeneratedArtifacts
+**/*.DesktopClient/ModelManifest.xml
+**/*.Server/GeneratedArtifacts
+**/*.Server/ModelManifest.xml
+_Pvt_Extensions
+
+# Paket dependency manager
+.paket/paket.exe
+paket-files/
+
+# FAKE - F# Make
+.fake/
+
+# JetBrains Rider
+.idea/
+*.sln.iml
+
+# CodeRush
+.cr/
+
+# Python Tools for Visual Studio (PTVS)
+__pycache__/
+*.pyc
\ No newline at end of file
